<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This is oziroe.</title>
  <subtitle>Please call me cowsay.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oziroe.github.io/"/>
  <updated>2017-08-04T15:39:47.000Z</updated>
  <id>https://oziroe.github.io/</id>
  
  <author>
    <name>oziroe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>狂想症中毒患者的生日篇章</title>
    <link href="https://oziroe.github.io/2017/08/04/%E7%8B%82%E6%83%B3%E7%97%87%E4%B8%AD%E6%AF%92%E6%82%A3%E8%80%85%E7%9A%84%E7%94%9F%E6%97%A5%E7%AF%87%E7%AB%A0/"/>
    <id>https://oziroe.github.io/2017/08/04/狂想症中毒患者的生日篇章/</id>
    <published>2017-08-04T15:38:55.000Z</published>
    <updated>2017-08-04T15:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>到明天为止，我就要满18岁了。</p>
<p>回顾一下自己曾经默默立下的Flag，除去那些极偶尔的，或已经忘却或已经离我远去的幻想，每个梦境，最晚都截止于18岁吧。</p>
<p>这和中二病的症状倒是很相似，除了一个幻想自己已经是什么，而一个幻想自己将要做且做成什么（本人是后者），已经——作为一个耿直的人，我不介意回顾这些所谓黑历史的存在，毕竟，“我”总共就这么多，仅仅因为个人审美就要扔掉一部分，实在是太浪费了。</p>
<a id="more"></a>
<hr>
<p>如今记得的最早的幻想，大概是年龄前某次母亲给我搓澡时，如往常一样滔滔不绝《十万个为什么》之内容之余，突然搭错一根脑回路，说道，我具有某某物质存在于体内，所以搓澡时没有水冲着也可以调节体温不会太冷。嗯，这最初的起源算是标准的缺乏生活经验的中二。此后“我有超能力”的概念发展成了一个体系，用来解释我为什么跑得比同学快、能通过狭窄的缝隙等一系列现象。后来的某一天母亲突然打趣说，你不是有什么什么能力吗怎么会冷。突然一阵不好意思。这大概是我最后一次体会到对自己思想的羞耻。</p>
<p>小学时的幻想集中在纸飞机上。我可以制造出能够持续飞行30~100千米的纸飞机（嗯，贴着地面飞的导弹吧），其内部有固体燃料提供推动力，并且可以在飞行过程中抛弃燃料用尽的外壳。为了这一幻想，还特地架设了一个“纸飞机世锦赛”的世界观，会有大量观众像围观F1比赛或是环法自行车赛一样，聚集在重点线以及各级外壳被抛弃的地点，在纸飞机飞过时大声欢呼。为了提高观赏性，纸飞机的尾焰大概类似于焰火，抛弃外壳时会同时抛洒大量纸屑，并且外壳会转而向上以消耗动能，再伴随着纷纷的纸屑打开降落伞慢慢落回地面上。同样，到达终点的纸飞机会像航天飞机一样尾部拖拽一个降落伞减速，并且伴随着大量纸屑。以上记忆的清晰不是由于我记性好，而是它们占据了十年前的我大约80%的清醒时间的大脑。世界观是次要的，只是方便自己理解和拓展故事，其中有几个场景，纸飞机一瞬间掠过人群，欢呼声中漫天纸片和戴着降落伞的外壳缓缓落地，诸如此类的场景是幻想的关键。我会不知疲倦的重复幻想这几秒钟的事，变换不同的拍摄角度（这导致若干年后我做的梦也大多说是电影视角的），稍微修改情节，在幻想的同时体会到某种快感。这一核心，即幻想场景感受快感，成为此后至今我所有幻想的动力来源。</p>
<p>这一时段的幻想的特点是和我本人没什么关系，伴随着我开始慢慢掌握自己的生活这一特点被打破。随着这种打破，问题也就来了：我幻想中自己的生活，早晚要被现实否定。这命题眼熟吧？多少大学生因为这一点而痛苦万分。我则老道得多，初中时便分得清幻想和“预测”之间的区别，并且对于前者的落空保持坦然的态度。这态度也一直保持到了现在。我几个月前的幻想大概是，赶在自己还未成年时，把oz抑或是4b写完并搞出一个大新闻（“oz成为某大学教学语言”或者“4b刷新渲染效率记录”之类），然后对着记者的采访摆出一副谦虚的嘴脸，并在记者问到“有没有什么想对同龄人说的”时说：“17岁嘛，就是应该搞点事情的年龄。”嗯，如果说我有点不好意思，那更多的可能是一种对自己的失望的感觉吧。毕竟，我就像越活越走回头路了一般，现在的我，反而觉得这事是应该发生的了。抑或说，我的逻辑由于对自己的偏袒而充分畸形：我对自己说“这只是幻想”，因此不因其而努力；我又对自己说“这是现实”，因而沾沾自喜，感觉自己好厉害。</p>
<p>想想以此为主题，我也写过一些东西了。在已经尸骨无存的旧博客里，在之前夜行的文章里，我都表达过对这种幻想的态度：无用，百害无一利。事实上，夜行之后的一段日子里，我还真的有认真地回避自己幻想的企图，不过发现空下的80%的清醒时间如果都用来想现实问题的话，要么太累，要么控制不好自己的情绪（无形甩锅给现实问题），所以又对自己说“没办法啊”，同时重操旧业起来。今天赶在17岁的最后一天，对自己的态度相比之下已是柔和得多，写这篇文章的原因也是由于一点点无法避免的人类情怀而已。</p>
<hr>
<p>值此……嗯，我没有总结过去的习惯，辉煌就在那里，一眼就能看见用不着总结；我也没有展望未来的习惯……或者说我一天到晚都在展望未来，咳咳。出门买夜宵的路上，我想“18岁了，在此之际，开始好好努力吧”，然而我就像千千万万的同龄人一样，对自己这样的决心一万个不信任。不同的是，我自认为清楚自己立了决心而做不到的原因，那就是幻想。这东西深入我的大脑皮层，已超乎我理解能力的程度影响着我的思考和判断，最终阻碍着我变成一个更好的人。因此，18岁，我没有任何更多的目标，我只希望自己能干掉幻想带来的坏处，上一个台阶看这个世界。嗯，我都不指望干掉幻想本身了，能与之和睦相处，我就心满意足了。</p>
<p>也许做一个纯粹的人可以一定程度上避免幻想的副作用吧。最近写好的Try2048无论怎么看都是一个可喜的里程碑——不仅仅是长久以来第一件带给我成就感的作品，更因为我在完成其的过程中表现出与以往截然不同的行为模式：不再追求快和完成度，精雕细琢，而且长时间的全身心投入其上。综合前因后果，我把其原因归结为重装系统后开始的“纯粹化”进程：不像大多数情况那样为自己营造一个最舒适的工作环境，而是坚持让其最简单化。仿佛在一定程度上折磨了自己，但是心里很清楚任何拉低工作效率的障碍都已扫清。也许这就是好的工作方式，也许这就是好的开始吧。借着生日我决定再立一次Flag，说一句自己最讨厌的话——希望生日的加成能帮助我。我要脱离幻想的桎梏，到达真正的彼岸。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到明天为止，我就要满18岁了。&lt;/p&gt;
&lt;p&gt;回顾一下自己曾经默默立下的Flag，除去那些极偶尔的，或已经忘却或已经离我远去的幻想，每个梦境，最晚都截止于18岁吧。&lt;/p&gt;
&lt;p&gt;这和中二病的症状倒是很相似，除了一个幻想自己已经是什么，而一个幻想自己将要做且做成什么（本人是后者），已经——作为一个耿直的人，我不介意回顾这些所谓黑历史的存在，毕竟，“我”总共就这么多，仅仅因为个人审美就要扔掉一部分，实在是太浪费了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>多年后终于（开始）完成的夙愿——2048</title>
    <link href="https://oziroe.github.io/2017/08/01/%E5%A4%9A%E5%B9%B4%E5%90%8E%E7%BB%88%E4%BA%8E%EF%BC%88%E5%BC%80%E5%A7%8B%EF%BC%89%E5%AE%8C%E6%88%90%E7%9A%84%E5%A4%99%E6%84%BF%E2%80%94%E2%80%942048/"/>
    <id>https://oziroe.github.io/2017/08/01/多年后终于（开始）完成的夙愿——2048/</id>
    <published>2017-07-31T21:35:59.000Z</published>
    <updated>2017-07-31T23:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，我想写一个2048已经好久好久了……</p>
<blockquote>
<p>人蠢是一种怎样的体验？<br>连个2048都不会写。</p>
</blockquote>
<p><img src="/images/2048运行截图.png" alt="懒得上色的2048"></p>
<a id="more"></a>
<p>当然啦，我说的2048一定是指带动画的版本，静态的我早就写过了。“写个动画有什么难的？”我在动手写之前也是这么想的，后来发现这背后的问题大了……不过在此之前，我们先明确一下2048的规则。</p>
<h1 id="一群2们究竟是怎么合成一个2048的"><a href="#一群2们究竟是怎么合成一个2048的" class="headerlink" title="一群2们究竟是怎么合成一个2048的"></a>一群2们究竟是怎么合成一个2048的</h1><p>一个简单的问题：一行四个2，为什么合成的是两个4，不是一个8或者一个4+两个2？</p>
<p>在2048中，一次滑动之后，要经过以下的步骤：</p>
<ol>
<li>按照滑动的方向把数字分为四列，每列之间互不干涉。</li>
<li>按照滑动的方向把各数字标号，手指轨迹指向的方向为“大端”，从大端开始分别标号为1，2，3，4。</li>
<li>从2号数字开始，称为当前数字，执行以下的步骤<ol>
<li>查看当前数字前面的一个位置；</li>
<li>若该位置被标记为“已合并”，则当前数字停在该位置之后的一个位置上；</li>
<li>若该位置上有数字，则若该数字与当前数字一样，就将当前数字合并到该位置上，并将该位置标记为“已合并”；否则，将当前数字移动到该位置之后的一个位置上；</li>
<li>若该位置没有数字，则继续看该位置之前的一个位置，并重复以上步骤；若一直看到1号位置都没有数字，则将当前数字移动到1号位置上。</li>
</ol>
</li>
</ol>
<p>以上的步骤对每列的数字顺次执行，即前一个数字操作完了后一个数字再开始，当所有数字都操作完时这次滑动的效果全部完成。如果在整个过程中没有任何一个数字的位置或大小发生变化，则认为这是一个无效操作；否则在空格区域随机添加一个数字，位置完全随机，数字有十分之一的概率是4，其余是2。开局的两个数字与此一致。</p>
<hr>
<p>经过上面的一番长篇大论，大致可以看出，操作的基本单位是数字，而基本操作有三种：移动，合并和新增。其中合并是指一个数字不动，另一个数字移动到其位置与之合并，该操作又可以分为两步：先移动，然后目的地的数字替换为加倍的数字。为什么要把合并拆开看？仔细观察2048游戏界面就会发现，每次滑动过后的动画，是按照移动、合并和新增的顺序进行的，只有所有的移动动画全部结束以后（无论是单纯的移动还是合并的前半部分），才会开始合并的动画。到这里，为什么动画难实现的回答也有了一半：所有的操作不能按照算法的顺序直接作用在局面上，要先存起来，整理好顺序才能执行。</p>
<p>而另一半原因则是这三种操作本身的区别：移动和替换都是针对一个数字，而新增则是从无到有；移动时，两个数字可能会移动到同一个位置上。按照一般的思路……算了我已经把一般的思路忘得差不多了。接下来就是Try2048登场的时间了。</p>
<hr>
<p>相比起2048的“官方”<a href="https://github.com/gabrielecirulli/2048" target="_blank" rel="external">实现</a>，这应该算是一个超级短小的程序，目前还没有500行，因此没有分散在多个文件里，预期就是让读者可以一口气看到低——记得当初实在写不出去看官方版本的时候，还没有看懂那些现在看来连设计模式都算不上的封装就已经被吓跑了，真是怀念啊。写代码的思路基本是分层，然后由下至上的实现，因此本文也采取这样的顺序。</p>
<p>最底层并不是画界面，我认为这个层面可以慢慢写，所以首先抽象了三个基本操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Advent</span>(<span class="params">x, y, number, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Number "</span> + number + <span class="string">" appears at "</span> + StringP(x, y));</div><div class="line">    DisplayAdvent(x, y, number, finished);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Move</span>(<span class="params">x, y, newX, newY, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"The number at "</span> + StringP(x, y) + <span class="string">" is now at "</span> +</div><div class="line">        StringP(newX, newY));</div><div class="line">    DisplayMove(x, y, newX, newY, finished);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Substitute</span>(<span class="params">x, y, number, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"The number at "</span> + StringP(x, y) + <span class="string">" is now changed to "</span> +</div><div class="line">        number);</div><div class="line">    DisplaySubstitute(x, y, number, finished);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做之后给自己带来了一些小小的麻烦，下文中会详细讲到。可以看到，函数体原本只有一行log，后来写好了底层才对接了上来。接受的参数中<code>finished</code>是一个不带参数的回调函数，调用它即意味着当前基本操作完成了。是的，这些接口都会在动画执行之前就返回，因此需要这个参数确定确切的完成时间。原本只打印log的时候<code>finished</code>就直接就地调用了，现在则需要传下去。</p>
<p>有了基本操作的表示以后，进入到最复杂也是最重要的一个抽象层次：<code>Turn</code>。它代表着一次滑动所触发的所有基本操作的集合，对上层提供的接口除了向集合中添加基本操作外，还有一个<code>Trigger</code>函数，在执行时会按照上文所述的顺序执行所有的基本操作，并且等待一类基本操作都执行完了再执行下一类，它还可以携带一些钩子函数，在合适的时机触发它们。首先是内部数据结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Turn</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">this</span>._actions = &#123;<span class="attr">advent</span>: [], <span class="attr">move</span>: [], <span class="attr">substitute</span>: []&#125;;</div><div class="line">    <span class="keyword">this</span>._remain  = &#123;<span class="attr">advent</span>: <span class="number">0</span>, <span class="attr">move</span>: <span class="number">0</span>, <span class="attr">substitute</span>: <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>_actions</code>存了每种基本操作的每一个操作的调用参数，比如<code>advent</code>中的元素形式为<code>{x, y, number}</code>，与上面的接口相对应，而<code>_remain</code>中则是每种基本操作的剩余个数。</p>
<p>接下来是向<code>Turn</code>中添加操作的接口：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.Advent = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, number</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    self._remain.advent++;</div><div class="line">    self._actions.advent.push(&#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y, <span class="attr">number</span>: number&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.Move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, newX, newY</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    self._remain.move++;</div><div class="line">    self._actions.move.push(&#123;<span class="attr">x1</span>: x, <span class="attr">y1</span>: y, <span class="attr">x2</span>: newX, <span class="attr">y2</span>: newY&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.Merge = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, toX, toY, number</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    self.Move(x, y, toX, toY);</div><div class="line">    self._remain.substitute++;</div><div class="line">    self._actions.substitute.push(&#123;<span class="attr">x</span>: toX, <span class="attr">y</span>: toY, <span class="attr">number</span>: number * <span class="number">2</span>&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其中，<code>Merge</code>在该层被抽象出来，上层将可以使用真正需要的三个接口进行调用。接下来的<code>Trigger</code>函数……做好心理准备：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.Trigger = <span class="function"><span class="keyword">function</span>(<span class="params">afterMove=null, afterAdvent=null</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CommonPatternHere</span>(<span class="params">dataSet, call, decrease, beforeNext,</span></span></div><div class="line"><span class="function"><span class="params">        after</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">if</span> (dataSet.length === <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                after();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (dataSet.length &gt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">var</span> data = dataSet.pop();</div><div class="line">                call(data, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">                </span>&#123;</div><div class="line">                    <span class="comment">// It is heard that in Javascript there's no data race.</span></div><div class="line">                    <span class="comment">// The following code need fix if I was wrong.</span></div><div class="line">                    <span class="comment">// `decrease` will change count value and return its new</span></div><div class="line">                    <span class="comment">// value. It must be wrapped to change the origin var.</span></div><div class="line">                    <span class="keyword">if</span> (decrease() === <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span> (beforeNext !== <span class="literal">null</span>)</div><div class="line">                            beforeNext();</div><div class="line">                        after();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是该函数的第一部分。由于对于三种基本操作的处理方法基本一致，因此抽象出一个pattern。整个思路还算清晰，有点别扭的大概就是上面的<code>decrease</code>了，这是因为原本调用是用的<code>self._remain.advent</code>之类，后来发现不行，因此基本类型是传值调用的，于是改成<code>{value: self._remain.advent}</code>，结果还是不行，因为保留更改的只是这个匿名对象里的值，而从<code>self._remain.advent</code>到这个匿名对象还是复制了……所以接下来如果看到这种东西：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> --self._remain.advent; &#125;</div></pre></td></tr></table></figure>
<p>希望你能体会我的无奈。</p>
<p>哦你说为啥参数里没有<code>afterMerge</code>？这不是赤裸裸的歧视吗？一方面我还没想好怎么把它对接到替换上去，另一方面……其实这俩也是因为用上了才慢慢加上的，<code>afterMerge</code>？没有这种需求，当然就没有啦。</p>
<p>看完第一部分我想你已经猜到了接下来怎么调用它，不过也许你发现了一些不得了的东西：为什么这个函数要返回一个匿名函数？这不是多此一举吗？如果我告诉你这是为了保持和<code>after</code>参数形式的一致性，我想你大概能预感到一些可怕的事情了。没错，我遵循那个著名的信条：</p>
<blockquote>
<p>嵌套回调函数是丑陋的。</p>
</blockquote>
<p>原话大概还包含了对其的一个形象的比喻，不过被我忘记了。总之，作为嵌套回调转化为链式的准备步骤，就有了接下来的第二部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CurryList</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">this</span>._list = [];</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.Call = <span class="function"><span class="keyword">function</span>(<span class="params">dataSet, call, decrease,</span></span></div><div class="line"><span class="function"><span class="params">        beforeNext=null</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        self._list.push(&#123;<span class="attr">dataSet</span>: dataSet, <span class="attr">call</span>: call,</div><div class="line">            decrease: decrease, <span class="attr">beforeNext</span>: beforeNext&#125;);</div><div class="line">        <span class="keyword">return</span> self;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.List = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> self._list.map(<span class="function"><span class="keyword">function</span>(<span class="params">argument</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">after</span>)</span></div><div class="line"><span class="function">            </span>&#123;</div><div class="line">                <span class="keyword">return</span> CommonPatternHere(argument.dataSet,</div><div class="line">                    argument.call, argument.decrease,</div><div class="line">                    argument.beforeNext, after);</div><div class="line">            &#125;;</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可惜我当时脑子不太好使，不然应该可以写出一个不需要缓存参数的版本。现在……脑子更不好使了，就当没看见吧。从嵌套到平铺的一个关键问题就是没有<code>after</code>，因此首先对各个函数调用进行科里化，延缓其对<code>after</code>的需求。最后，第三部分包含了套参数和组装的过程：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> CurryList()</div><div class="line">.Call(self._actions.move,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">move, finished</span>) </span>&#123;</div><div class="line">        Move(move.x1, move.y1, move.x2, move.y2, finished);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// I want pointer!</span></div><div class="line">        <span class="keyword">return</span> --self._remain.move;</div><div class="line">    &#125;, afterMove)</div><div class="line">.Call(self._actions.substitute,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">sub, finished</span>) </span>&#123;</div><div class="line">        Substitute(sub.x, sub.y, sub.number, finished);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> --self._remain.substitute;</div><div class="line">    &#125;)</div><div class="line">.Call(self._actions.advent,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">advent, finished</span>) </span>&#123;</div><div class="line">        Advent(advent.x, advent.y, advent.number, finished);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> --self._remain.advent;</div><div class="line">    &#125;, afterAdvent)</div><div class="line">.List().reduceRight(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">after, previous</span>) </span>&#123; <span class="keyword">return</span> previous(after); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"All done for this turn."</span>); &#125;)();</div></pre></td></tr></table></figure>
<p>使用<code>reduceRight</code>就可以按照自然顺序进行链式调用了（“在<code>CurryList</code>里不能处理吗？”“听不见听不见……”），顺便你会发现在接口层当中预留的<code>finished</code>函数其实就是上面第一部分中定义的，基本逻辑是给计数器减一，到0就调用<code>after</code>开始下一阶段。<code>afterXXX</code>也都被安排到了合理的位置上。</p>
<p>顺便一说写到<code>reduceRight</code>的时候我突然想起对IE的兼容性问题，于是万念俱灰的用IE11打开这个页面，没想到在去掉了默认参数和<code>Array.fill</code>以后居然正确的运行了！这一刻我的喜悦和程序刚刚跑通时相比有增无减。</p>
<hr>
<p>下一个抽象层次是<code>Grid</code>，它代表一张棋盘。在这里，我们终于要迎来喜闻乐见的游戏逻辑，而在此之前，问自己一个问题：如何避免把同样的代码写四遍？官方实现用的方法非常精巧，而我就笨拙得多了。进入主题前先看看内部数据结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grid</span>(<span class="params">size</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">this</span>._grid = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._grid.length; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>._grid[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>._grid[i].length; j++)</div><div class="line">            <span class="keyword">this</span>._grid[i][j] = <span class="number">0</span>;  <span class="comment">// 0 means no number here.</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个简单的二维数组，因为去掉了<code>Array.fill</code>所以显得有些啰嗦，不过倒是有点像我上一篇文章里说的，有点C程序的感觉了，只是现在……我谢天谢地它不是用C写的。跳过生成随机数字的函数，首先来看<code>Slide</code>的第一部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `direction`: 0 =&gt; up, 1 =&gt; right, 2 =&gt; down, 3 =&gt; left.</span></div><div class="line"><span class="keyword">this</span>.Slide = <span class="function"><span class="keyword">function</span>(<span class="params">direction, turn</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// Slide `numbers` toward numbers[0].</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SlideVector</span>(<span class="params">numbers, move, merge</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; merged.length; i++)</div><div class="line">            merged[i] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">var</span> changed = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; size; i++)  <span class="comment">// First number stays.</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (numbers[i] === <span class="number">0</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (merged[j])  <span class="comment">// Merged number will not be modified again.</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> !== i)</div><div class="line">                    &#123;</div><div class="line">                        changed = <span class="literal">true</span>;</div><div class="line">                        move(i, j + <span class="number">1</span>);</div><div class="line">                        numbers[j + <span class="number">1</span>] = numbers[i];</div><div class="line">                        numbers[i] = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (numbers[j] !== <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (numbers[j] === numbers[i])  <span class="comment">// Merge same numbers.</span></div><div class="line">                    &#123;</div><div class="line">                        changed = <span class="literal">true</span>;</div><div class="line">                        merge(i, j, numbers[i]);</div><div class="line">                        merged[j] = <span class="literal">true</span>;</div><div class="line">                        numbers[j] += numbers[i];</div><div class="line">                        numbers[i] = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>  <span class="comment">// Move to neighbour.</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span> (j + <span class="number">1</span> !== i)</div><div class="line">                        &#123;</div><div class="line">                            changed = <span class="literal">true</span>;</div><div class="line">                            move(i, j + <span class="number">1</span>);</div><div class="line">                            numbers[j + <span class="number">1</span>] = numbers[i];</div><div class="line">                            numbers[i] = <span class="number">0</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (j === <span class="number">0</span>)  <span class="comment">// Stop moving on the edge.</span></div><div class="line">                &#123;</div><div class="line">                    changed = <span class="literal">true</span>;</div><div class="line">                    move(i, <span class="number">0</span>);</div><div class="line">                    numbers[<span class="number">0</span>] = numbers[i];</div><div class="line">                    numbers[i] = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> changed;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个子函数的功能是把一列数向着它的首元素方向“滑动”，逻辑基本就是上文的复述。这里主要注意的是移动数字以后对于“是否改变”的判定，要把“原地移动”的情况排除掉。想来这个函数功能的简单出乎各位看官的预料，那么更多的功能显然交给调用方了。大家等不及看四遍重复的代码了吧？然而，还真没有……</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UP = <span class="number">0</span>, RIGHT = <span class="number">1</span>, DOWN = <span class="number">2</span>, LEFT = <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> changed = <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> first = <span class="number">0</span>; first &lt; size; first++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> numbers = <span class="keyword">new</span> <span class="built_in">Array</span>(size), iX = <span class="keyword">new</span> <span class="built_in">Array</span>(size),</div><div class="line">        iY = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> second = <span class="number">0</span>; second &lt; size; second++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> sec = direction === UP || direction === LEFT ? second :</div><div class="line">            size - second - <span class="number">1</span>;</div><div class="line">        <span class="comment">// I hate 80 ruler.</span></div><div class="line">        iX[second] =</div><div class="line">            direction === UP || direction === DOWN ? first : sec;</div><div class="line">        iY[second] =</div><div class="line">            direction === UP || direction === DOWN ? sec : first;</div><div class="line">        <span class="comment">// console.log(second + " " + StringP(iX[second], iY[second]));</span></div><div class="line">        numbers[second] = self._grid[iX[second]][iY[second]];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// It's a little breaking my rule to put left brace on the same line</span></div><div class="line">    <span class="comment">// of previous code, but it seems too ugly otherwise.</span></div><div class="line">    <span class="keyword">var</span> c = SlideVector(numbers, <span class="function"><span class="keyword">function</span>(<span class="params">from, to</span>) </span>&#123;</div><div class="line">        turn.Move(iX[<span class="keyword">from</span>], iY[<span class="keyword">from</span>], iX[to], iY[to]);</div><div class="line">        self._grid[iX[to]][iY[to]] = self._grid[iX[<span class="keyword">from</span>]][iY[<span class="keyword">from</span>]];</div><div class="line">        self._grid[iX[<span class="keyword">from</span>]][iY[<span class="keyword">from</span>]] = <span class="number">0</span>;</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">from, to, number</span>) </span>&#123;</div><div class="line">        turn.Merge(iX[<span class="keyword">from</span>], iY[<span class="keyword">from</span>], iX[to], iY[to], number);</div><div class="line">        self._grid[iX[to]][iY[to]] += self._grid[iX[<span class="keyword">from</span>]][iY[<span class="keyword">from</span>]];</div><div class="line">        self._grid[iX[<span class="keyword">from</span>]][iY[<span class="keyword">from</span>]] = <span class="number">0</span>;</div><div class="line">    &#125;);</div><div class="line">    changed = c ? <span class="literal">true</span> : changed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (changed)</div><div class="line">    self.AddRandom(turn);</div><div class="line"><span class="keyword">return</span> changed;</div></pre></td></tr></table></figure>
<p>在对不同的情况把<code>numbers</code>当中的数排好顺序的同时，填好<code>iX</code>和<code>iY</code>两个数组，作为两个平行数组分别储存<code>numbers</code>中各元素的x和y坐标。在<code>SlideVector</code>中使用的<code>move</code>和<code>merge</code>也在此处被包装好，提供足够的信息去调用下层的接口。在此之后，<code>Grid</code>当中还有一个判断游戏是否结束的函数，主要检查两件事：还有没有空位，以及有没有相邻的相同元素，符合任何一个条件都还是活局，否则就死了。</p>
<p>以上两个层次作为这篇代码的精华，也是最华而不实的部分……如果把其中为了形式美观做的抽象（科里化、<code>SlideVector</code>子函数等）都去掉，再把所有的左大括号拿到上一行去（做梦吧），这篇代码也许就只剩300多行了。</p>
<hr>
<p>接下来是组装前的最后一个步骤：画界面层。在这里我就遇到了之前给自己挖的坑：接口层留的三个基本接口实在是太“纯粹”了，它们都是无状态的接口，不能在两次调用之间留存任何信息。而偏偏图形层就需要一些信息：比如说前一个调用创建了一个数字，后一个调用去移动它的时候，得先在DOM树上把它找回来。之前采用id来标识，就会遇到两个数字移动到同一个位置的尴尬局面。最后先妥协了一下，用了全局变量，之后尽量把它改过来，先凑合着看吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Display Part.</span></div><div class="line"><span class="comment">// This is the base of a more complicated implementation of interfaces.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DisplayInitialize</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> container = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    container.id = <span class="string">"board-tiles-container"</span>;</div><div class="line">    container.style.width = container.style.height = <span class="string">"450px"</span>;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"board-container"</span>).appendChild(container);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> searchTable = <span class="keyword">new</span> <span class="built_in">Object</span>, registryTable = <span class="keyword">new</span> <span class="built_in">Object</span>, deadQueue = <span class="keyword">new</span> <span class="built_in">Array</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DisplayAdvent</span>(<span class="params">x, y, number, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> tile = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    tile.innerText = number;</div><div class="line">    tile.classList.add(<span class="string">"board-tile"</span>);</div><div class="line">    tile.style.transition = <span class="string">"all 0.05s"</span>;</div><div class="line">    tile.style.width = tile.style.height = <span class="number">0</span>;</div><div class="line">    tile.style.lineHeight = <span class="string">"100px"</span>;</div><div class="line">    tile.style.fontSize = <span class="number">0</span>;</div><div class="line">    tile.style.margin = <span class="string">"50px"</span>;</div><div class="line">    tile.style.top  = (y * <span class="number">110</span> + <span class="number">10</span>) + <span class="string">"px"</span>;</div><div class="line">    tile.style.left = (x * <span class="number">110</span> + <span class="number">10</span>) + <span class="string">"px"</span>;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"board-tiles-container"</span>).appendChild(tile);</div><div class="line">    searchTable[StringP(x, y)] = tile;</div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        tile.style.width = tile.style.height = <span class="string">"100px"</span>;</div><div class="line">        tile.style.fontSize = <span class="string">"20px"</span>;</div><div class="line">        tile.style.margin = <span class="string">""</span>;</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">    OnceListener(tile, finished);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DisplayMove</span>(<span class="params">x, y, newX, newY, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> tile = searchTable[StringP(x, y)];</div><div class="line">    tile.style.transition = <span class="string">"all 0.2s"</span>;</div><div class="line">    tile.style.top  = (newY * <span class="number">110</span> + <span class="number">10</span>) + <span class="string">"px"</span>;</div><div class="line">    tile.style.left = (newX * <span class="number">110</span> + <span class="number">10</span>) + <span class="string">"px"</span>;</div><div class="line">    <span class="comment">// There's no need to worry about overriding.</span></div><div class="line">    <span class="comment">// Any override tile will be override again by substitution.</span></div><div class="line">    <span class="comment">// So any of them survives will be okay.</span></div><div class="line">    <span class="keyword">if</span> (registryTable[StringP(newX, newY)] !== <span class="literal">undefined</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> dead = registryTable[StringP(newX, newY)];</div><div class="line">        deadQueue.push(dead);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">delete</span> searchTable[StringP(x, y)];</div><div class="line">    registryTable[StringP(newX, newY)] = tile;</div><div class="line">    OnceListener(tile, finished);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DisplayAfterMove</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span> (deadQueue.length &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> dead = deadQueue.pop();</div><div class="line">        dead.parentElement.removeChild(dead);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.keys(registryTable).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">pos</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (searchTable[pos] !== <span class="literal">undefined</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> dead = searchTable[pos];</div><div class="line">            dead.parentElement.removeChild(dead);</div><div class="line">        &#125;</div><div class="line">        searchTable[pos] = registryTable[pos];</div><div class="line">    &#125;);</div><div class="line">    registryTable = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">    <span class="comment">// console.log(searchTable);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DisplaySubstitute</span>(<span class="params">x, y, num, finished</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> tile = searchTable[StringP(x, y)];</div><div class="line">    tile.innerText = num;</div><div class="line">    tile.style.transition = <span class="string">"all 0.1s"</span>;</div><div class="line">    tile.style.width = tile.style.height = tile.style.lineHeight = <span class="string">"110px"</span>;</div><div class="line">    tile.style.fontSize = <span class="string">"22px"</span>;</div><div class="line">    tile.style.margin = <span class="string">"-5px"</span>;</div><div class="line">    OnceListener(tile, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        tile.style.width = tile.style.height = tile.style.lineHeight = <span class="string">"100px"</span>;</div><div class="line">        tile.style.fontSize = <span class="string">"20px"</span>;</div><div class="line">        tile.style.margin = <span class="string">""</span>;</div><div class="line">        OnceListener(tile, finished);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中还有大量的常数，之后会抽到配置当中去。这里的三个全局（列）表都是为<code>DisplayMove</code>服务的，在一个<code>Turn</code>的周期内，所有的数字以如下的方式在这三个表中流窜：</p>
<ul>
<li>最初，所有数字都在<code>searchTable</code>里；</li>
<li>移动阶段，每个数字移动的同时，把自己注册到<code>registryTable</code>的对应位置上，如果遇到两个数字都移动且终点相同的情况则后来者会覆盖先到者，并把它转移到<code>deadQueue</code>里面去。（这里谁去谁留没有区别，因为这种情况之后一定会对应一个替换步骤，所以……谁都活不了）</li>
<li>移动结束阶段，首先<code>deadQueue</code>里的数字被清除掉，然后<code>registryTable</code>里的数字转移回<code>searchTable</code>里，如果转移回来的时候发现对应的格子里已经有数字了，说明这是一个数字移动到另一个静止数字位置上的情况，则静止数字被清除，由新来的数字填补。</li>
<li>接下来的时间里，大家都一直呆在<code>searchTable</code>里，直到下一个移动阶段到来。</li>
</ul>
<p>这里的一个要点就是一定要到移动结束阶段（对应于<code>DisplayAfterMove</code>函数）才可以开始清理重叠的数字，对于静止的数字，这是为了防止格子上的数字突然消失吓到小朋友；对于两个数字都移动的情况，别忘了它们身上还有一个<code>finished</code>呢，这个函数的调用时机是<code>transitionend</code>事件（比手动<code>setTimeout</code>高端多了），如果提前清掉了移动阶段就再也结束不了了。这几个方法的结尾都有一个<code>OnceListener</code>函数的调用，这个函数会给元素添加一个绑定在<code>transitionend</code>事件上的一次性回调函数，触发了就被移除，避免与下一个<code>finished</code>弄混。</p>
<p>此外，<code>DisplayAdvent</code>要实现的动画效果是从中心一个点开始扩大，要把设置其样式为正常值的部分放在<code>setTimeout(..., 0)</code>的里面，这样可以避免与前面的DOM操作合并，动画没了是小事，触发不了<code>transitionend</code>可就坏了。</p>
<p>最后，<code>DisplaySubstitute</code>（感谢这个程序终于让我记熟了这个词的拼写）的效果是先变大一圈再变小。你问我为什么不写成链式的了？懒啊！</p>
<hr>
<p>好了，最后终于来到了主函数部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Main Part.</span></div><div class="line"><span class="comment">// The main game loop and entry point.</span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    DisplayInitialize();</div><div class="line">    <span class="keyword">var</span> turn = <span class="keyword">new</span> Turn();</div><div class="line">    <span class="keyword">var</span> grid = <span class="keyword">new</span> Grid(<span class="number">4</span>);</div><div class="line">    grid.AddRandom(turn);</div><div class="line">    grid.AddRandom(turn);</div><div class="line">    turn.Trigger();</div><div class="line">    <span class="comment">// console.log(grid);</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> animating = <span class="literal">false</span>, over = <span class="literal">false</span>;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// Disable key press during animation.</span></div><div class="line">        <span class="keyword">if</span> (animating || over)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">var</span> map = &#123;<span class="attr">w</span>: <span class="number">0</span>, <span class="attr">d</span>: <span class="number">1</span>, <span class="attr">s</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>&#125;;</div><div class="line">        <span class="keyword">if</span> (e.key <span class="keyword">in</span> map)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (grid.Slide(map[e.key], turn))</div><div class="line">            &#123;</div><div class="line">                animating = <span class="literal">true</span>;</div><div class="line">                turn.Trigger(DisplayAfterMove, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    animating = <span class="literal">false</span>;</div><div class="line">                    <span class="built_in">console</span>.log(StringG(grid));</div><div class="line">                    <span class="keyword">if</span> (grid.Over())</div><div class="line">                    &#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"Game Over"</span>);</div><div class="line">                        over = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// console.log(searchTable);</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大部分逻辑都一目了然了。其中<code>animating</code>是为了在动画过程中屏蔽按键（虽然除非你是故意瞎滑也不可能那么快做出判断），而“Game Over”的界面不仅仅是没有加入到真正的页面上，甚至没有完成其正确性测试……每一局都因为各种奇奇怪怪的原因流产了……最后一次是在IE11上，我把它的console调出来看看输出，然后键盘操作就不好使了……什么龟。</p>
<hr>
<p>感觉就像讲了一生的故事一样，这份代码经过几次推倒重来，虽然最终版只用了小半天时间，但算是近很长一段时间以来唯一一个算是完整的作品。当然啦，只能叫“算是”，毕竟这份代码的最终目的——帮我玩出4096，还一点都没开始呢。</p>
<p>项目地址：<a href="https://github.com/oziroe/try-2048" target="_blank" rel="external">try-2048</a>，欢迎丢星星。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，我想写一个2048已经好久好久了……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人蠢是一种怎样的体验？&lt;br&gt;连个2048都不会写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2048运行截图.png&quot; alt=&quot;懒得上色的2048&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://oziroe.github.io/tags/javascript/"/>
    
      <category term="2048" scheme="https://oziroe.github.io/tags/2048/"/>
    
      <category term="try-2048" scheme="https://oziroe.github.io/tags/try-2048/"/>
    
      <category term="函数式编程" scheme="https://oziroe.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>突然回忆的过往之事</title>
    <link href="https://oziroe.github.io/2017/07/30/%E7%AA%81%E7%84%B6%E5%9B%9E%E5%BF%86%E7%9A%84%E8%BF%87%E5%BE%80%E4%B9%8B%E4%BA%8B/"/>
    <id>https://oziroe.github.io/2017/07/30/突然回忆的过往之事/</id>
    <published>2017-07-30T05:16:07.000Z</published>
    <updated>2017-07-30T05:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>重新安装了系统，出于某种……我自己也难以理解的洁癖不想在macOS底下装中文输入法，然而要我在Windows底下配置博客环境还不如直接杀了我，于是这篇文章变成了这样……</p>
<p><img src="/images/记事本博客截图.PNG" alt="这篇博客现在的样子……"></p>
<p>在此再复述一遍早就挖好的坑：</p>
<blockquote>
<p>一个可以全平台使用（尤其是Windows）的博客客户端</p>
</blockquote>
<p>再不勤奋一点我自甘日狗。</p>
<a id="more"></a>
<p>一个人的寝室，虽然不想承认，但还是有些落寞。整个人也不自觉的更勤奋了一些以转移注意力。上午区区两个小时，就写出了一个2048游戏的核心逻辑，不知道两年前死活写不出的我若是知晓会怎么想。唉……傻逼，谁让你不会用函数作抽象。不过这个javascript代码看着就是很奇怪……它仿佛用尽自己的力气在呐喊：“老子是C！把老子的拓展名改回来！”也许十年前的js我的风格会是主流吧，现在只能叫泥石流了。</p>
<p>等这个项目完工了会上传GitHub。（谁在挖坑？）</p>
<hr>
<p>多年前的一个暑假，我沉迷玩滑板，先是两脚一个板的蛇板，后来是换了一脚一个的，父亲就玩起了旧板陪我。夕阳之下，一大群小孩子里混杂着一个大人笨拙着，现在想起来要很大的勇气吧。</p>
<p>有一天我和一群孩子在比试谁能滑上人行道，我玩的双板显然不可能，于是我借了一个孩子的单板，临到人行道时一个交叉后踢腿，人跑到一边，但是板子会飞上人行道。</p>
<p>这大概是一种非常暴力的动作，借我板子的小孩沉着脸让我把板还给他，我不听，又试了一次。这次围过来的人有点多。过了好大一会我才明白异常所在：我把那孩子的板玩成了两截。</p>
<p>我慌了，意料之外的情况不知如何处理。父亲走过去商量了一下，回来说，他把旧板赔给那个孩子了。</p>
<p>“那你滑什么？”话没问出口就被我吞了回去。这不是那时的我会做的事。</p>
<p>我突然感到一阵心痛。那时的我，性格顽劣。这是我第一次因为意识到自己的过错所付出代价的沉重而心痛。</p>
<p>不过，要想看到我彻底明白什么才是责任，还要等上好多年。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新安装了系统，出于某种……我自己也难以理解的洁癖不想在macOS底下装中文输入法，然而要我在Windows底下配置博客环境还不如直接杀了我，于是这篇文章变成了这样……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/记事本博客截图.PNG&quot; alt=&quot;这篇博客现在的样子……&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此再复述一遍早就挖好的坑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个可以全平台使用（尤其是Windows）的博客客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再不勤奋一点我自甘日狗。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="破事水" scheme="https://oziroe.github.io/tags/%E7%A0%B4%E4%BA%8B%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>在实现oz的路上迈出第一步（避免被认为是死了）</title>
    <link href="https://oziroe.github.io/2017/07/23/%E5%9C%A8%E5%AE%9E%E7%8E%B0oz%E7%9A%84%E8%B7%AF%E4%B8%8A%E8%BF%88%E5%87%BA%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%88%E9%81%BF%E5%85%8D%E8%A2%AB%E8%AE%A4%E4%B8%BA%E6%98%AF%E6%AD%BB%E4%BA%86%EF%BC%89/"/>
    <id>https://oziroe.github.io/2017/07/23/在实现oz的路上迈出第一步（避免被认为是死了）/</id>
    <published>2017-07-23T15:04:24.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>既是指项目，也是指人。</p>
<p>刚刚将所有的提交合并到主分支上，现在<a href="https://github.com/oziroe/oz" target="_blank" rel="external">代码仓库</a>的语言条变得五颜六色了起来。唔，标准的程序员浪漫么。</p>
<a id="more"></a>
<p>首先是有关Makefile的奇技淫巧。Makefile的隐式规则处理lex足够了，但是它不会自动生成yacc的头文件<code>y.tab.h</code>，导致了lex规则中不能用token之类的宏和变量。因此要做三件事：</p>
<ol>
<li>手动添加yacc的参数<code>-d</code>，确保生成头文件</li>
<li>确保yacc的规则在lex的规则之前被处理生成</li>
<li>由于修改了Makefile规则，原来的自动删除中间文件现在没有了，要手动删除</li>
</ol>
<p>最后的成果大概是这样：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">all: main</span></div><div class="line">	cp main oz</div><div class="line"></div><div class="line"><span class="section">main: lexical.o grammer.o</span></div><div class="line"><span class="section">lexical.o: grammer.c</span></div><div class="line"><span class="section">grammer.c: YFLAGS += -d</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></div><div class="line"><span class="section">clean:</span></div><div class="line">	rm *.o *.tab.h grammer.c main</div></pre></td></tr></table></figure>
<p>其中复制的一步是为了避免重复链接oz（同时还要用隐式规则），又希望上一级的Makefile看到的名字是oz而不是main。没有刻意保持目录的整洁，很多东西留到了clean里面才删，等项目大一些了要考虑重写一下。</p>
<hr>
<p>lex的规则有点奇怪。写成如下这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot; &quot;&#123;OPERATOR_CHARSET1&#125;+/(&quot;(&quot;|[0-9]) &#123; /* ... */ &#125;</div></pre></td></tr></table></figure>
<p>而不是后面括号当中部分的分配率展开形式可以避免报错如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lexical.l:66: warning, trailing context made variable due to preceding &apos;|&apos; action</div><div class="line">lexical.l:66: warning, dangerous trailing context</div></pre></td></tr></table></figure>
<p>（也许）也能避免一些解析错误。原因未知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既是指项目，也是指人。&lt;/p&gt;
&lt;p&gt;刚刚将所有的提交合并到主分支上，现在&lt;a href=&quot;https://github.com/oziroe/oz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码仓库&lt;/a&gt;的语言条变得五颜六色了起来。唔，标准的程序员浪漫么。&lt;/p&gt;
    
    </summary>
    
    
      <category term="oz" scheme="https://oziroe.github.io/tags/oz/"/>
    
      <category term="lex" scheme="https://oziroe.github.io/tags/lex/"/>
    
      <category term="yacc" scheme="https://oziroe.github.io/tags/yacc/"/>
    
      <category term="Makefile" scheme="https://oziroe.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>关于一个新的语言oz的构想</title>
    <link href="https://oziroe.github.io/2017/07/20/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%AF%AD%E8%A8%80oz%E7%9A%84%E6%9E%84%E6%83%B3/"/>
    <id>https://oziroe.github.io/2017/07/20/关于一个新的语言oz的构想/</id>
    <published>2017-07-20T15:49:23.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的<a href="https://github.com/oziroe/oz" target="_blank" rel="external">代码仓库</a>已经建立，欢迎捧个人场。实话说，Github的语言条还是让我惊讶了一下。</p>
<p><img src="/images/还有这种操作.png" alt="还有这种操作"></p>
<a id="more"></a>
<p>算是在开发渲染器路上绕的一个大大的圈子吧。不满足于C/C++的使用体验，用Ruby又会因为弱类型而异常痛苦，终于成了压倒骆驼的最后一根稻草。</p>
<p>这门语言的核心目标是：</p>
<blockquote>
<p>存在着与C中一一对应的语言特性。</p>
</blockquote>
<p>这门语言的终极目标是：</p>
<blockquote>
<p>作为一个消歧义的、高于自然语言的存在，在不影响阅读体验的前提下实现所有功能。</p>
</blockquote>
<p>一些已经构思好的特色之处：</p>
<ul>
<li>通过标准库实现结构、对象和一切非核心功能。</li>
<li>对上一条的解释：语法灵活，可以定制语法糖和语言特性。</li>
<li>真正基于约束（而不是绕一个弯子基于类型）的模板。</li>
<li>更加统一和形象的符号使用。</li>
</ul>
<p>好啦，就是什么都没有说。写出点什么再过来写吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的&lt;a href=&quot;https://github.com/oziroe/oz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码仓库&lt;/a&gt;已经建立，欢迎捧个人场。实话说，Github的语言条还是让我惊讶了一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/还有这种操作.png&quot; alt=&quot;还有这种操作&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="oz" scheme="https://oziroe.github.io/tags/oz/"/>
    
      <category term="造轮子" scheme="https://oziroe.github.io/tags/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>夜行记</title>
    <link href="https://oziroe.github.io/2017/07/09/%E5%A4%9C%E8%A1%8C%E8%AE%B0/"/>
    <id>https://oziroe.github.io/2017/07/09/夜行记/</id>
    <published>2017-07-08T23:49:34.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>可不是梦游哦。</p>
<p>PS：西安地铁三号线的声音真是令人惊艳。</p>
<a id="more"></a>
<p><img src="/images/夜行记路线图.png" alt="这些路程大约花了三个小时走完。"></p>
<p>大约凌晨两点的时候从宿舍出发，开始向市中心散步。</p>
<p>夜幕中的城市可不像我想象中的那样平静，哪怕是除去车辆的因素。</p>
<p>少量暴露在空气中的人和我一样用脚步丈量地面；其余的人分成两部分，或者骑各式非机动车（其中共享单车出奇的多），或者待在原地静止不动。</p>
<p>静止不动的人当中，有的人在工作，如道路维修。</p>
<p>有的人在睡觉，身旁的工友在工作。</p>
<p>一个姑娘提着一只行李箱倚在人行道旁的栏杆上，带着哭腔对着电话讲我听不懂的方言。</p>
<p>时不时有三五成群的青壮年，或清醒或不清醒地与我相遇。越接近市中心，看起来越清醒，同时女性占比越高。</p>
<p>到达钟楼转盘道时一辆黄色的法拉利正路过，离开时像电影中一样轰了一脚油门，展示了一下没有消声器的噪音。</p>
<hr>
<p>我来到市中心的哈根达斯店旁，打量着它。比我印象中要小。也许是当年服务员的气焰太盛（想让我们买华而不实的新品的心理太焦急），让我对它的体量的印象有了偏差。也许它因为服务质量不好业绩太差租不起房子。</p>
<p>绕过鼓楼望向回民街。没有人烟。只有零星的僵尸招牌。虽然是理论上的市中心，不过还是让我有所顾忌不敢进去。</p>
<p>来到鼓楼前印象中宽阔热闹的小广场。</p>
<p>每一棵树四周都有一圈长椅。我想挑一个歇歇脚。</p>
<p>几乎每一个长椅上都躺着一名流浪汉。</p>
<p>我一路挑到路边。旁边一棵树下的人没有睡，坐在椅子上。不过我想他应该不太可能和我有相似的经历。</p>
<hr>
<p>早餐的摊位陆陆续续的被推了出来。令我惊讶的是，它们几乎都是一个品牌的加盟……摊。还打出了口号：</p>
<blockquote>
<p>早餐，午餐，晚餐，都从xxxx开始。</p>
</blockquote>
<p>我想象了一下自己去路边摊买午饭的情景。</p>
<p>路边的连锁小型超市也几乎都是一个品牌。其招牌与7-11基本只有名字的区别。为什么大城市的街边超市可以繁荣而小城市不行，这依然是个未解之谜。</p>
<p>我一共在这些超市里买了两瓶水。喝了一瓶半。</p>
<hr>
<p>最终我到达了大明宫。我本打算来看日出，然而却发现东边被云覆盖。我还是爬到了制高点，虽然还是没有身边的树高。耳朵除了各种生灵的鸣叫外，还有持续不断的人的呼喊。这是晨练的人们在呼喊。这里的树木让这些分散在各处的人彼此不现面目，从而很好的避免了当面大吼的尴尬。同时，类似于狼群的本能又让人在身边传来呼喊时很想跟着喊一嗓子。</p>
<p>我也这么想着，于是提了一口气。在我发出声音前短短的一段时间里，我感觉到自己心跳达到了140，其加速堪比法拉利。这导致我的声音颤抖了一下才平稳下来。</p>
<p>我喝了一口水。这也太怂了。想想自己口无遮拦的时候。真是该紧张的时候不紧张，不该紧张的时候瞎紧张。</p>
<p>大概是很久没有这样按照声带进化的本意进行发声了。我喊了几次，都找不到气沉丹田的感觉。喉咙不舒服。</p>
<p>身边一个老人过来掏垃圾桶。然后他把装了瓶子的口袋挂在一棵树上，坐在一旁的椅子上轻松地开始高难度的拉伸运动。跟他们比我简直就是个废物。</p>
<p>“大家早上好！”各种吼叫声中夹杂着这样一句。“早上好——早上好——”来自四面八方的回复。</p>
<p>“起得早！”“起得早——”“身体好！”“身体好——”</p>
<p>我整个人沐浴在透过云层的阳光中。</p>
<hr>
<ul>
<li>无论做任何事情，都会有风险，即有可能利益小于投入，这是不可避免的。</li>
<li>一般来说，事情总是不会在我们预想麻烦的地方麻烦。努力的作用是让每个地方在麻烦起来的时候都能好处理一点。</li>
<li>不要再心存幻想。每个人都有自己的想象，但我滥用了它。通过幻想我在默默地自大。最终的结果是心理和现实的不一致导致的扭曲。</li>
<li>对自己的奖赏应当先安排好了再执行。执行时不管怎么样都应当按照安排的方式和额度。</li>
<li>尽可能多的独自一人。应当把共享当做是合作的一种要求，而不是默认设定。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可不是梦游哦。&lt;/p&gt;
&lt;p&gt;PS：西安地铁三号线的声音真是令人惊艳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>4b的下一个进化步骤</title>
    <link href="https://oziroe.github.io/2017/07/04/4b%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%BF%9B%E5%8C%96%E6%AD%A5%E9%AA%A4/"/>
    <id>https://oziroe.github.io/2017/07/04/4b的下一个进化步骤/</id>
    <published>2017-07-04T04:27:08.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见。虽然看了看时间，上一篇文章不过过去了一周有余，但还是有种自己已经把写博客的习惯丢掉了的恐惧。</p>
<a id="more"></a>
<p>贯彻<a href="/2017/06/19/有关于数据结构角色和组织方式的一点思考/" title="上一篇相关文章">上一篇相关文章</a>的思想，我重新写了4b……其实不是。我发现贝塞尔曲线本身的复杂度超过了我的接受能力，所以将其改为直线，先写出了一个叫做4l的版本……其实也不是。我还没有写完用四种颜色填充图片的算法，所以大概只能叫rl(random colors background with lines)。之所以没有写完是因为自己实现的朴素算法在处理一些边界条件和浮点数相关的时候没有足够的经验，导致程序的崩溃率在95%左右。</p>
<p>于是，我采用了一套解决方案。首先，改变技术栈。C++本身的复杂度依然是个问题。原本计划换成Swift，奈何它对于非App开发过于不友好。于是在首先由于个人原因排除了Python的前提下，选了Ruby。这货我一直都有一定的好感，其语言特性有一丝LISP的味道。而且其C API比Python简洁得多，之后遇到一定会有的用C拓展的阶段也会是个优势。</p>
<p>然后，我需要专业知识的辅助。是的，就是这样一个小程序，一个用来生成符合我口味的桌面壁纸的小程序，现在要害得我啃英文大部头了。学了这些知识只为了写这一个程序性价比可不高。于是我决定看<a href="http://download.csdn.net/download/neoxiong/9839916" target="_blank" rel="external">PBRT</a>，之后真正将其中的技术尽量都转化到这个小程序里面。</p>
<p>路漫漫其修远兮。各位保重，我可能又要好久不见了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不见。虽然看了看时间，上一篇文章不过过去了一周有余，但还是有种自己已经把写博客的习惯丢掉了的恐惧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="4b" scheme="https://oziroe.github.io/tags/4b/"/>
    
      <category term="Ruby" scheme="https://oziroe.github.io/tags/Ruby/"/>
    
      <category term="Swift" scheme="https://oziroe.github.io/tags/Swift/"/>
    
      <category term="pbrt" scheme="https://oziroe.github.io/tags/pbrt/"/>
    
  </entry>
  
  <entry>
    <title>噩梦记</title>
    <link href="https://oziroe.github.io/2017/07/04/%E5%99%A9%E6%A2%A6%E8%AE%B0/"/>
    <id>https://oziroe.github.io/2017/07/04/噩梦记/</id>
    <published>2017-07-04T04:18:21.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个夜晚开始得比较晚。记住了最后一个梦，估计已是日上三竿时的作品了吧。</p>
<p>梦里我去了你住的小区，楼宇布局和我学校宿舍楼类似。我要在自己单方面约定的时间等着你。我穿过初中母校，经过一个从来没有开过的门，碰到一些学校教职工。我进了你的小区，却不记得约定的楼在哪里。我沿着横平竖直的楼房，焦急地奔跑着，呼喊着，害怕会错过你。</p>
<p>看样子，一时半会，你是不会离开我的了。</p>
<p>你说要点亮自己，我又何尝不是。希望那一天早点到来。我足够明亮，以至于任何的你都不会使我面临与现在的困境类似的情况的那一天。</p>
<hr>
<p>以上为陷入《约会大作战》OVA而难过之后的疯言疯语。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个夜晚开始得比较晚。记住了最后一个梦，估计已是日上三竿时的作品了吧。&lt;/p&gt;
&lt;p&gt;梦里我去了你住的小区，楼宇布局和我学校宿舍楼类似。我要在自己单方面约定的时间等着你。我穿过初中母校，经过一个从来没有开过的门，碰到一些学校教职工。我进了你的小区，却不记得约定的楼在哪里。我
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="做梦" scheme="https://oziroe.github.io/tags/%E5%81%9A%E6%A2%A6/"/>
    
  </entry>
  
  <entry>
    <title>二梦记</title>
    <link href="https://oziroe.github.io/2017/06/27/%E4%BA%8C%E6%A2%A6%E8%AE%B0/"/>
    <id>https://oziroe.github.io/2017/06/27/二梦记/</id>
    <published>2017-06-27T03:47:59.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/4b-step1.png" alt="4b早期作品"></p>
<a id="more"></a>
<p>昨晚做了两个梦。</p>
<p>一个说我在家里，被人打劫了。我家族里大概是有黑帮势力，所以这是一次黑吃黑。</p>
<p>有人闯进来的时候我愣了好久，估计有五六秒。在想怎么解释以逃脱。</p>
<p>醒来觉得自己的情商还是太低了。</p>
<p>后半段的梦太过于模糊和混乱。只记得爸妈大概知道了，回来了，两方势力正在打口水仗。</p>
<p>空气中弥漫着劫匪片的紧张气氛，然而我的大脑却不知道劫匪片该安排什么剧情。</p>
<p>考虑到是它的初次尝试就不予追究了。下次不要再像这样，怂恿我来写一篇博客，却让我连情节都找不出一点。</p>
<hr>
<p>然后，醒来关一个闹钟，两个。回到梦里，这次是关于你的。</p>
<p>我坐在有你的教室里。你在我右手边，隔了一个，两个人。也许加上一条过道。</p>
<p>我不知道你的高中老师的样貌，所以梦中安排了初中班主任和语文老师站在讲台上，发物理试卷。我也不知道你的班级发试卷的情景，所以放了几个大学发作业的镜头。</p>
<p>老师训斥我，说我每一科都差点不及格，决不能再这样下去了。</p>
<p>我在梦中下定决心，我要好好学习，学好之前都不理你了。</p>
<p>最后的镜头大概是窗外，又是一副电影常用的结局的嘴脸。不过没什么感觉就是了。</p>
<hr>
<p>原本准备了一大段的抒情，却又不想写了。</p>
<p>原本在考虑要不要把链接发给你，却又犹豫了。</p>
<p>该相遇的人和文字自然会相遇，该懂的人自然会懂。该解不开的心结，谁来帮忙也是无济于事。一切还是看缘分吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/4b-step1.png&quot; alt=&quot;4b早期作品&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="做梦" scheme="https://oziroe.github.io/tags/%E5%81%9A%E6%A2%A6/"/>
    
  </entry>
  
  <entry>
    <title>有关于数据结构角色和组织方式的一点思考</title>
    <link href="https://oziroe.github.io/2017/06/19/%E6%9C%89%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E8%89%B2%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>https://oziroe.github.io/2017/06/19/有关于数据结构角色和组织方式的一点思考/</id>
    <published>2017-06-19T02:51:37.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>也许数据结构不应该过于追求通用性。</p>
<p>我大概是被STL影响了吧。一整套的基本数据结构，以及搭配的基本算法，还可以随便排列组合，多么美好。</p>
<p>可是它怎么就没有图呢。用的时候，怎么就要考虑那么多拷贝构造函数，RTTI，甚至是智能指针之类的麻烦事呢。</p>
<p>数据结构不应该作为一种设计模式存在。就算两个图的功能再像，只要它是两个图，背后的含义就是不一样的。</p>
<p>更不必说，对于不同使用场景的相同结构，从前期的坑到后期的优化点，都是完全不一样的。</p>
<p>通用容器只能提供最基本的抽象。就像智能指针，也只能用引用计数，而永远不可能换用效率更高的算法。限制太多了。</p>
<p>如果真的想更通用一点，那就只能用动态语言了。即便如此，还是没人在标准库里写图，写最小生成树，写霍夫曼树。</p>
<p>得不偿失的行为。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许数据结构不应该过于追求通用性。&lt;/p&gt;
&lt;p&gt;我大概是被STL影响了吧。一整套的基本数据结构，以及搭配的基本算法，还可以随便排列组合，多么美好。&lt;/p&gt;
&lt;p&gt;可是它怎么就没有图呢。用的时候，怎么就要考虑那么多拷贝构造函数，RTTI，甚至是智能指针之类的麻烦事呢。&lt;/p
    
    </summary>
    
    
      <category term="4b" scheme="https://oziroe.github.io/tags/4b/"/>
    
      <category term="数据结构" scheme="https://oziroe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="破事水" scheme="https://oziroe.github.io/tags/%E7%A0%B4%E4%BA%8B%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>眼光与耳光（水）</title>
    <link href="https://oziroe.github.io/2017/06/16/%E7%9C%BC%E5%85%89%E4%B8%8E%E8%80%B3%E5%85%89%EF%BC%88%E6%B0%B4%EF%BC%89/"/>
    <id>https://oziroe.github.io/2017/06/16/眼光与耳光（水）/</id>
    <published>2017-06-16T12:18:06.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么眼光和耳光，是两个意思完全不一样的词呢？</p>
<p>如果我想形容一个人鉴赏音乐的“眼光”，该用什么词呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么眼光和耳光，是两个意思完全不一样的词呢？&lt;/p&gt;
&lt;p&gt;如果我想形容一个人鉴赏音乐的“眼光”，该用什么词呢？&lt;/p&gt;

    
    </summary>
    
    
      <category term="破事水" scheme="https://oziroe.github.io/tags/%E7%A0%B4%E4%BA%8B%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>某数据结构实验报告（水）</title>
    <link href="https://oziroe.github.io/2017/06/14/%E6%9F%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%EF%BC%88%E6%B0%B4%EF%BC%89/"/>
    <id>https://oziroe.github.io/2017/06/14/某数据结构实验报告（水）/</id>
    <published>2017-06-14T15:01:53.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>居然还有<a href="http://www.zamzar.com/convert/pdf-to-html/" target="_blank" rel="external">这种操作</a>，真是厉害。</p>
<a id="more"></a>
<iframe src="/html/某数据结构实验报告.html" style="width:100%; height: 35100px"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;居然还有&lt;a href=&quot;http://www.zamzar.com/convert/pdf-to-html/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这种操作&lt;/a&gt;，真是厉害。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://oziroe.github.io/tags/C/"/>
    
      <category term="数据结构" scheme="https://oziroe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>逃学归家而无病呻吟</title>
    <link href="https://oziroe.github.io/2017/06/12/%E9%80%83%E5%AD%A6%E5%BD%92%E5%AE%B6%E8%80%8C%E6%97%A0%E7%97%85%E5%91%BB%E5%90%9F/"/>
    <id>https://oziroe.github.io/2017/06/12/逃学归家而无病呻吟/</id>
    <published>2017-06-11T16:51:21.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>原本应该是“归家有感”的标题被硬生生改成这样。唉，没办法，我就是受不了参差不齐的文件名。</p>
<p>说是“逃学”，其实也是有请假单的。只是此时此刻室友们大概还在备战下周的五门考试，而我却刚刚写了个热水澡，坐在这里畅想明天与女朋友相见，实在有点莫名的心虚。</p>
<p>不过这点心虚应该还是值得的。毕竟，人生中能同时体会到高考结束、长大成人和男朋友突然出现的喜悦的机会也就那么一次半次。嗯，你看，没有人打我的时候我能把自己塑造得多么高尚啊。</p>
<a id="more"></a>
<p>排队安检时前面的女生对着手机大声发着一条条语音：“你还没结婚就花了快二十万了你自己想想为了她值得吗……而且还不一定能结婚……”“法律上来说她不用和你一起付完按揭……”“我觉得你脑子被门夹了……”突然觉得自己活在蜜罐里。</p>
<p>深夜坐着老爸开的车回家。他精神有点萎靡，打着哈欠，差点闯红灯。感觉很对不起父母，明明是自己贪图享乐还要把他们牵扯进来。</p>
<p>班机上邻座的女生指着前排靠背背面的广告对同伴说：“你看它这是不是写错了，‘开户即享佣金万2.5’，应该是2.5万吧。”“然后还印了那么多遍。”同伴表示赞同和惋惜。我刚在内心嘲讽完她们的愚昧，就不得不再嘲讽一次我自己的自大。</p>
<p>洗澡前看了一眼镜子中的自己。真的瘦。想起这学期出发前曾在镜子前拍了一张，用来在现在发一条对比的动态以展示一个学期的坚持锻炼有多大用处，然而……我好像更瘦了……肋骨都能看到两端了。还好我把存放那张照片的手机留在了学校。</p>
<p>忘了哪一个牙刷是自己的。老爸说：“你看这个上面牙膏这么多，一定是你的。”……原本我以为女朋友所说的“你的东西都旧得很一致”是她观察力敏锐的结果，原来身边的人早已达成了共识……好吧。</p>
<hr>
<p>所以为什么会有这篇文字呢？</p>
<p>今天在考场上第一次遇到了作文凑字吃力的情况。回忆了一下，我每天的写作主要分为毫无感情的技术介绍和超级隐晦的情感宣泄两种，一般人能看懂的部分太少了。我需要多写一些“正常”的东西。</p>
<p><strong>还有，这不是一个纯技术博客。</strong></p>
<p>冥冥之中我预感刚刚开始的今天我会玩得很high，不会有空写代码，为了不让commit断掉所以……【逃</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本应该是“归家有感”的标题被硬生生改成这样。唉，没办法，我就是受不了参差不齐的文件名。&lt;/p&gt;
&lt;p&gt;说是“逃学”，其实也是有请假单的。只是此时此刻室友们大概还在备战下周的五门考试，而我却刚刚写了个热水澡，坐在这里畅想明天与女朋友相见，实在有点莫名的心虚。&lt;/p&gt;
&lt;p&gt;不过这点心虚应该还是值得的。毕竟，人生中能同时体会到高考结束、长大成人和男朋友突然出现的喜悦的机会也就那么一次半次。嗯，你看，没有人打我的时候我能把自己塑造得多么高尚啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://oziroe.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>有关于pip、lxml和Minecraft的坑各一则</title>
    <link href="https://oziroe.github.io/2017/06/10/%E6%9C%89%E5%85%B3%E4%BA%8Epip%E3%80%81lxml%E5%92%8CMinecraft%E7%9A%84%E5%9D%91%E5%90%84%E4%B8%80%E5%88%99/"/>
    <id>https://oziroe.github.io/2017/06/10/有关于pip、lxml和Minecraft的坑各一则/</id>
    <published>2017-06-10T06:58:52.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>流年不利。</p>
<a id="more"></a>
<hr>
<p>pip的配置文件在linux/macOS和Windows当中下的路径是不同的。参考<a href="http://www.cnblogs.com/yudar/p/4444097.html" target="_blank" rel="external">这篇博客</a>，在Windows下的路径为<code>%HOMEPATH%\pip\pip.ini</code>，而不是<code>~/.pip/pip.conf</code>。</p>
<hr>
<p>最近lxml更新到了3.8.0，然而该版本在Windows上无法使用。具体症状是<code>from lxml import etree</code>会出现DLL找不到的情况。解决方案是回退到3.7.3版本即可。</p>
<hr>
<p>Minecraft更新了1.12正式版，然而……崩溃了。</p>
<p><img src="/images/Minecraft报错信息.png" alt="报错信息"></p>
<p>看起来并没有找到一个叫做<code>ca.weblite.objc.NSObject</code>的类……开玩笑吗你找不到Objective-C的爷爷类。希望不是因为盗版登录器的兼容问题吧。毕竟我还只是弱鸡一个，没钱给自己买正版。</p>
<p><span style="color: grey">从今天起，少说废话，节约各位看官的生命。</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流年不利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Bug" scheme="https://oziroe.github.io/tags/Bug/"/>
    
      <category term="Minecraft" scheme="https://oziroe.github.io/tags/Minecraft/"/>
    
      <category term="pip" scheme="https://oziroe.github.io/tags/pip/"/>
    
      <category term="Python" scheme="https://oziroe.github.io/tags/Python/"/>
    
      <category term="Java" scheme="https://oziroe.github.io/tags/Java/"/>
    
      <category term="macOS" scheme="https://oziroe.github.io/tags/macOS/"/>
    
      <category term="Cacoa" scheme="https://oziroe.github.io/tags/Cacoa/"/>
    
      <category term="lxml" scheme="https://oziroe.github.io/tags/lxml/"/>
    
      <category term="DLL" scheme="https://oziroe.github.io/tags/DLL/"/>
    
      <category term="Windows" scheme="https://oziroe.github.io/tags/Windows/"/>
    
      <category term="Objective-C" scheme="https://oziroe.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>离散数学代数系统部分的归纳整理</title>
    <link href="https://oziroe.github.io/2017/06/09/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%BB%A3%E6%95%B0%E7%B3%BB%E7%BB%9F%E9%83%A8%E5%88%86%E7%9A%84%E5%BD%92%E7%BA%B3%E6%95%B4%E7%90%86/"/>
    <id>https://oziroe.github.io/2017/06/09/离散数学代数系统部分的归纳整理/</id>
    <published>2017-06-09T09:18:11.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/代数系统.png" alt="代数系统简图"></p>
<p>每一次画示意图，我都发誓这是我最后一次画示意图。神呐救救我的布局吧。</p>
<a id="more"></a>
<ol>
<li>集合的性质是由公理得出的。</li>
<li>两个集合的叉积（笛卡尔积）的一个子集称为这两个集合上的关系。<ul>
<li>等价关系的证明：<strong>自反</strong>、<strong>对称</strong>、<strong>传递</strong>。</li>
<li>半序关系的证明：<strong>自反</strong>、<strong>反对称</strong>、<strong>传递</strong>。</li>
</ul>
</li>
<li>函数的证明：<strong>左满右唯一</strong>。</li>
<li>运算的证明：<strong>封闭性</strong>。<ol>
<li>通常出现在群上运算的规律：<strong>结合律</strong>，<strong>交换律</strong>，<strong>分配率</strong>。<ul>
<li>对于某两个运算$\otimes$和$\oplus$，则<strong>$\otimes$对$\oplus$的分配率</strong>：$a \otimes (b \oplus c) = (a \otimes c) \oplus (b \otimes c)$。注意哪一个在里面。</li>
</ul>
</li>
<li>通常出现在格上运算的规律：<strong>吸收率</strong>，<strong>幂等律</strong>，<strong>交换律</strong>，<strong>结合律</strong>，<strong>模律</strong>。模律是对称的。</li>
<li>通常出现在群上运算的特殊元素：<strong>零元</strong>、<strong>幺元</strong>、<strong>零因子</strong>、<strong>逆元</strong>、<strong>生成元</strong>。</li>
<li>通常出现在格上运算的特殊元素：<strong>补元</strong>。</li>
<li>通常用来组成群上运算的基本运算：<strong>加</strong>、<strong>乘</strong>、<strong>模加</strong>、<strong>模乘</strong>。</li>
<li>通常用来组成格上运算的基本运算：<strong>最大公约数</strong>、<strong>最小公倍数</strong>、<strong>交</strong>（与）、<strong>并</strong>（或）、<strong>补</strong>（非）。</li>
</ol>
</li>
<li>代数系统的证明：<strong>运算封闭</strong>。<ul>
<li>子代数系统证明：<strong>非空</strong>、<strong>包含</strong>、<strong>运算封闭</strong>。</li>
</ul>
</li>
<li>半群的证明：<strong>运算封闭</strong>、<strong>结合律</strong>。<ul>
<li>子半群的证明：<strong>非空</strong>、<strong>包含</strong>、<strong>运算封闭</strong>。（结合律继承）</li>
</ul>
</li>
<li>群的证明：<strong>运算封闭</strong>、<strong>结合律</strong>、<strong>有幺元</strong>、<strong>每个元素都有逆元</strong>。<ul>
<li>子群的证明：<strong>非空</strong>、<strong>包含</strong>、<strong>幺元属于子集</strong>、<strong>运算的混合封闭性</strong>：$\forall x,y \in S,\, x \oplus y^{-1} \in S$。（结合律继承）</li>
</ul>
</li>
</ol>
<p><span style="color: grey">剩下的还没复习完，未完待续。</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/代数系统.png&quot; alt=&quot;代数系统简图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每一次画示意图，我都发誓这是我最后一次画示意图。神呐救救我的布局吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="离散数学" scheme="https://oziroe.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
      <category term="代数系统" scheme="https://oziroe.github.io/tags/%E4%BB%A3%E6%95%B0%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>博客改版，格式微调实记</title>
    <link href="https://oziroe.github.io/2017/06/08/%E5%8D%9A%E5%AE%A2%E6%94%B9%E7%89%88%EF%BC%8C%E6%A0%BC%E5%BC%8F%E5%BE%AE%E8%B0%83%E5%AE%9E%E8%AE%B0/"/>
    <id>https://oziroe.github.io/2017/06/08/博客改版，格式微调实记/</id>
    <published>2017-06-08T14:51:27.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个静态博客框架，Hexo已经足够优秀。只是或多或少有一点Bug存在，不知为何。这篇文章记录了一些微调和修改，以使整个网站看上去更加正常。</p>
<a id="more"></a>
<hr>
<p>这个其实几天前就忍不了了……更换了页头的背景图，因为默认的实在看不清副标题。用这张图替换<code>themes/landscape/source/css/images/banner.jpg</code>即可。</p>
<p><img src="/images/封面图.jpg" alt="新的封面图"></p>
<hr>
<p>更换了字体为Open Sans。这个字体是从Typora的配置里面拿出来的，用Typora的时候实在是眼馋得不得了。将Typora主题文件夹里的<code>github</code>文件夹复制到博客的<code>themes/landscape/source/css/fonts</code>文件夹下，然后添加文件<code>themes/landscape/source/css/github-font.css</code>，内容如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">include</span>-<span class="keyword">when</span>-<span class="keyword">export</span> url(http://fonts.googleapis.com/css?family=Open+Sans:<span class="number">400</span>italic,<span class="number">700</span>italic,<span class="number">700</span>,<span class="number">400</span>&amp;subset=latin,latin-ext);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* css forked from https://github.com/GitbookIO/gitbook</span></div><div class="line"><span class="comment">* www.gitbook.com</span></div><div class="line"><span class="comment">* Apache License</span></div><div class="line"><span class="comment">* https://github.com/GitbookIO/gitbook/blob/master/LICENSE</span></div><div class="line"><span class="comment">**/</span></div><div class="line"></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">   <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>;</div><div class="line">   <span class="attribute">font-style</span>: normal;</div><div class="line">   <span class="attribute">font-weight</span>: normal;</div><div class="line">   <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'Open Sans Regular'</span>),<span class="built_in">url</span>(<span class="string">'./fonts/github/400.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">   <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>;</div><div class="line">   <span class="attribute">font-style</span>: italic;</div><div class="line">   <span class="attribute">font-weight</span>: normal;</div><div class="line">   <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'Open Sans Italic'</span>),<span class="built_in">url</span>(<span class="string">'./fonts/github/400i.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">   <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>;</div><div class="line">   <span class="attribute">font-style</span>: normal;</div><div class="line">   <span class="attribute">font-weight</span>: bold;</div><div class="line">   <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'Open Sans Bold'</span>),<span class="built_in">url</span>(<span class="string">'./fonts/github/700.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">   <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>;</div><div class="line">   <span class="attribute">font-style</span>: italic;</div><div class="line">   <span class="attribute">font-weight</span>: bold;</div><div class="line">   <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'Open Sans Bold Italic'</span>),<span class="built_in">url</span>(<span class="string">'./fonts/github/700i.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一段是从Typora的<code>github.css</code>文件中复制出来的，看起来Typora是从Gitbook复制的。对原作者表示感谢。文件路径稍有更改。</p>
<p>在同目录下的<code>style.styl</code>中添加一行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"github-font.css"</span></div></pre></td></tr></table></figure>
<p>即可大功告成。</p>
<hr>
<p>原本的日期显示有一点问题。修改<code>themes/landscape/layout/_widget/archive.ejs</code>中的日期格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;% if (site.posts.length)&#123; %&gt;</div><div class="line">  &lt;div class=&quot;widget-wrap&quot;&gt;</div><div class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;archive_a&apos;) %&gt;&lt;/h3&gt;</div><div class="line">    &lt;div class=&quot;widget&quot;&gt;</div><div class="line">      &lt;%- list_archives(&#123;show_count: theme.show_count, type: theme.archive_type, format: &apos;YYYY年M月&apos;&#125;) %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>注意第五行的格式变化。类似的还有<code>themes/landscape/layout/_partial/archive-post.ejs</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;article class=&quot;archive-article archive-type-&lt;%= post.layout %&gt;&quot;&gt;</div><div class="line">  &lt;div class=&quot;archive-article-inner&quot;&gt;</div><div class="line">    &lt;header class=&quot;archive-article-header&quot;&gt;</div><div class="line">      &lt;%- partial(&apos;post/date&apos;, &#123;class_name: &apos;archive-article-date&apos;, date_format: &apos;M月D日&apos;&#125;) %&gt;</div><div class="line">      &lt;%- partial(&apos;post/title&apos;, &#123;class_name: &apos;archive-article-title&apos;&#125;) %&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/article&gt;</div></pre></td></tr></table></figure>
<p>注意第四行的日期格式。这样做损失了多国语言的兼容性，不过参考<a href="https://hexo.io/zh-cn/docs/helpers.html#list-archives" target="_blank" rel="external">官方文档</a>也没有看出什么名堂。希望有更好的办法吧。</p>
<hr>
<p>在主题的配置文件<code>_config.yml</code>当中去掉了fancybox效果，去掉了tag边栏。前者加载太慢了，对移动端的兼容也不太好；后者纯属个人喜好。</p>
<hr>
<p>大概的改动就是这些。默认主题landscape可以满足大多数日常所需，曾经做得大改动就是改了tag的位置并且为其加上了五颜六色的背景色。不过这回应该不会这样做了吧。</p>
<p>为什么高亮没有EJS。是不是应该换一个……算了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个静态博客框架，Hexo已经足够优秀。只是或多或少有一点Bug存在，不知为何。这篇文章记录了一些微调和修改，以使整个网站看上去更加正常。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://oziroe.github.io/tags/hexo/"/>
    
      <category term="oziroe.github.io" scheme="https://oziroe.github.io/tags/oziroe-github-io/"/>
    
      <category term="ejs" scheme="https://oziroe.github.io/tags/ejs/"/>
    
      <category term="stylus" scheme="https://oziroe.github.io/tags/stylus/"/>
    
      <category term="typora" scheme="https://oziroe.github.io/tags/typora/"/>
    
      <category term="css" scheme="https://oziroe.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>对于顺序任务可控执行的合理封装</title>
    <link href="https://oziroe.github.io/2017/06/07/%E5%AF%B9%E4%BA%8E%E9%A1%BA%E5%BA%8F%E4%BB%BB%E5%8A%A1%E5%8F%AF%E6%8E%A7%E6%89%A7%E8%A1%8C%E7%9A%84%E5%90%88%E7%90%86%E5%B0%81%E8%A3%85/"/>
    <id>https://oziroe.github.io/2017/06/07/对于顺序任务可控执行的合理封装/</id>
    <published>2017-06-07T06:07:16.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于<a href="https://github.com/oziroe/Bitabase" target="_blank" rel="external">Bitabase</a>这个项目，我并没有计划把它做得很复杂。首先分为两个大模块：<code>Bitabase</code>部分承担真正的爬取工作部分，<code>web</code>（还没有想好名字）会渲染一个简单的本地网站用于把数据展示出来，以及提供操作接口以控制爬虫的工作。虽然项目迁移到了macOS/PyCharm的开发环境，但是依然保留着Visual Studio的结构，因为……懒。开玩笑啦，要不是VS的补全实在太慢，也许到现在这还是一个Windows底下开发的项目。</p>
<p><code>Bitabase</code>底下没有更加细分的模块。<code>interface.py</code>是面向标准库和第三方库的一个封装，理论上其上方的代码就不用再直接引用任何其他库了，全部需求可以由它本身满足；<code>base.py</code>是代码真正的基础，将<code>interface.py</code>里提供的原始的、面向过程的接口改造成为需求量身定制的形状，所有应用层的代码（比如<code>web</code>模块）都不应该越过<code>base</code>而直接引用<code>interface</code>。今天要讲的就是<code>base</code>模块当中最开始的一部分。</p>
<a id="more"></a>
<p>根据<a href="/2017/06/05/简单的可暂停单工作线程模型/" title="上一篇文章中">上一篇文章中</a>所描述的，<code>interface</code>为我提供了一个简单的单工作线程，其实还有一个用来提起网络请求的接口，长成这个样子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url: str, session: requests.Session = None, json: bool = False,</span></span></div><div class="line"><span class="function"><span class="params">                text: bool = True, **kwargs)</span> -&gt; (bool, dict or str or bytes):</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>嗯，看来高亮不能正确处理换行，编辑器也不能正确处理Tab，真是一个充满恶意的世界呀。</p>
<p>有了以上两种东西以后，问题就变成了如何把它们组装起来。经过考虑我决定把“请求”作为一个任务和产品。这个概念过于抽象，所以我用类比的方式给接口命名，以及写这篇博客。因此，下面的提示非常重要：</p>
<p><strong>注意：本文作者默认读者对于<a href="http://ow.blizzard.cn/home" target="_blank" rel="external">《守望先锋》</a>有基本的了解（世界观、英雄等），为了不影响观看本文的体验，请不满足此假设的读者点击前面的链接提高自身姿势水平，谢谢配合。</strong></p>
<p>好了，这回我们从顶至下地进行游览。一下代码摘自单元测试，可以算是最简单的应用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hanzo</span><span class="params">(self)</span>:</span></div><div class="line">    after = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(hanzo)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> after</div><div class="line">        after = hanzo</div><div class="line"></div><div class="line">    baidu_hanzo = Hanzo(<span class="string">'https://baidu.com'</span>, callback)</div><div class="line">    overwatch = Overwatch()</div><div class="line">    overwatch.conscript([baidu_hanzo])</div><div class="line">    overwatch.dismiss()</div><div class="line">    self.assertIsInstance(after, Hanzo)</div><div class="line">    self.assertIsInstance(after.data, str)</div><div class="line">    self.assertEqual(after.data[:<span class="number">15</span>], <span class="string">'&lt;!DOCTYPE html&gt;'</span>)</div></pre></td></tr></table></figure>
<p>可以看到两个基础的类：半藏<code>Hanzo</code>和守望先锋<code>Overwatch</code>。这里面的守望先锋特制那支队伍（“We are overwatch!”），而非游戏本身。每个半藏承载着一个请求，调用一个半藏实例的<code>fire</code>方法（射箭）就会把这个请求发送出去——下层当时是调用了<code>get_request</code>方法。每个半藏还会接受一个回调函数作为构造参数，这个回调函数接受一个半藏实例作为参数，而这个实例就是射完了箭的半藏。在<code>fire</code>当中半藏会用请求返回的数据更新自身，从而供回调函数使用。半藏不是老说“为你效命”吗？这个回调函数就叫<code>servicing</code>，没毛病。</p>
<p><code>Overwatch</code>本质上就是把<code>worker</code>的接口统一到了一个类里，但是区别在于守望先锋的团队对于它的队员有要求：目前来说只能是半藏。而<code>worker</code>并不在意你把什么东西当做任务推进去了——它只是原封不动地把任务送进<code>worker_method</code>当中去了而已。守望先锋的<code>conscript</code>（应征入伍）接口接受一列半藏作为参数，把它们加入到守望先锋的队伍当中去，并按照顺序调用每一个半藏的<code>fire</code>。而<code>dismiss</code>（解散）则对应着<code>wait_for_worker_finish</code>，阻塞等待半藏们各自射完箭，并将自身的状态更新为<code>dismissed</code>，不再接受更多半藏的入伍请求。<code>retire</code>（退役）接口用于将已经射完箭的半藏送回它所效命的主子那里去，具体的就是调用每一个产品队列里的半藏携带的<code>servicing</code>回调函数。你可以看到上面的例子当中没有出现这个接口，因为在解散守望先锋的时候这个接口会自动被调用——挺合理的。另外这个接口也会在运行过程中周期性的被调用到。</p>
<p>先来看一段具体的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_team_member: int = <span class="number">0</span>, max_retry: int = <span class="number">3</span>)</span>:</span></div><div class="line">    self.worker = create_worker(self._duty)</div><div class="line">    self.member_count = <span class="number">0</span></div><div class="line">    self.total_hanzo_count = <span class="number">0</span></div><div class="line">    self.max_team_member = max_team_member <span class="keyword">if</span> max_team_member &gt; <span class="number">0</span> <span class="keyword">else</span> \</div><div class="line">        Overwatch.max_team_member</div><div class="line">    self.max_retry = max_retry</div><div class="line">    self.hanzoes = &#123;&#125;</div><div class="line">    self.retry_count = &#123;&#125;</div><div class="line">    self.dismissed = <span class="keyword">False</span></div><div class="line">    self.result = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>这是守望先锋的构造函数。可以看到用来当做<code>worker</code>的回调函数是<code>self._duty</code>，接下来会详细研究它，而其他的一些量中，头三个比较重要。一个守望先锋队伍是有人数上限的，不能无限地让射完了箭的半藏堆在队伍里，这样不利于程序的健壮性。每当半藏的人数达到上限的时候，就要先让完成了工作的半藏们退休，然后再接着射箭：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_duty</span><span class="params">(self, hanzo_id: int)</span> -&gt; int:</span></div><div class="line">    <span class="keyword">if</span> self.member_count == self.max_team_member:</div><div class="line">        self.retire()</div><div class="line">    self.total_hanzo_count += <span class="number">1</span></div><div class="line">    self.hanzoes[hanzo_id].fire()</div><div class="line">    self.member_count += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> hanzo_id</div></pre></td></tr></table></figure>
<p>上述逻辑在此表达的比较清楚。这里你可能会有疑问了，说好的把半藏作为任务呢？怎么是传的ID，而把半藏本人给扣在队伍里了？这里就要涉及到实现过程中遇到的第一个坑了。</p>
<p>如前一篇文章中所记述，worker与主线程之间的通信（交换任务和产品）是用过<code>Pipe</code>来实现的。而<code>Pipe</code>在传输对象前要先对其进行序列化。我的理解是为了防止已经进入管道的对象被别的线程修改，造成读取时与原始的状态不一致。而序列化是通过调用<code>pickle</code>来实现的。而<code>pickle</code>……在一篇Stack Overflow的回答当中直接被用了“broken”来形容，我觉得不算夸张。由于半藏实例要包含一个回调函数，因此无法被序列化。经过若干企图“绕过”的尝试失败以后，我只好采取如上的迂回办法。由此对应的入伍方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">conscript</span><span class="params">(self, hanzo_list: Iterable[Hanzo])</span> -&gt; <span class="keyword">None</span>:</span></div><div class="line">    self.hanzoes.update(&#123;id(hanzo): hanzo <span class="keyword">for</span> hanzo <span class="keyword">in</span> hanzo_list&#125;)</div><div class="line">    append_tasks(self.worker, map(id, hanzo_list))</div></pre></td></tr></table></figure>
<p>拿<code>id</code>的返回值作键，应该是高枕无忧了吧。</p>
<hr>
<p>先给出退役接口的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">retire</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></div><div class="line">    retry_list = []</div><div class="line">    <span class="keyword">for</span> hanzo_id <span class="keyword">in</span> get_products(self.worker):</div><div class="line">        <span class="keyword">if</span> hanzo_id <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        hanzo = self.hanzoes[hanzo_id]</div><div class="line">        <span class="keyword">if</span> hanzo.ok:</div><div class="line">            hanzo.refine()</div><div class="line">        <span class="keyword">elif</span> self.dismissed:</div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> Log here.</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">elif</span> self.retry_count.get(hanzo, <span class="number">-1</span>) == self.max_retry:</div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> Log here.</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.retry_count[hanzo] = <span class="number">1</span> <span class="keyword">if</span> hanzo <span class="keyword">not</span> <span class="keyword">in</span> self.retry_count \</div><div class="line">                <span class="keyword">else</span> self.retry_count[hanzo] + <span class="number">1</span></div><div class="line">            hanzo.ok = hanzo.exception = <span class="keyword">None</span></div><div class="line">            retry_list.append(hanzo)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        hanzo.servicing(hanzo)</div><div class="line">        <span class="keyword">del</span> self.hanzoes[hanzo_id]</div><div class="line">    self.member_count = <span class="number">0</span></div><div class="line">    self.conscript(retry_list)</div></pre></td></tr></table></figure>
<p>是不是比想象中的要复杂？这是因为我写了另一个功能：出错重试。拿到半藏实例之后的大条件分支里一共有一下四种情形：</p>
<ul>
<li>如果箭射得没问题，在<code>fire</code>当中<code>ok</code>会被设置为<code>True</code>。此时执行<code>refine</code>（精炼）函数，将拿到的纯文本/json对象数据转化成更特异化的形式，以方便主子处理。在<code>Hanzo</code>当中<code>refine</code>就是一个空方法，在子类当中会被覆写。</li>
<li>如果箭没射好但队伍已经解散了，那么也就没有重试的机会了（下层的<code>worker</code>已经关闭，不能接收更多的任务了），所以不重试。</li>
<li>如果已经达到了最大重试上限，那也不重试。</li>
<li>否则，将两个标志着错误的状态（<code>ok == False</code>和<code>exception != None</code>）清除掉，这样就把半藏洗干净了，可以放回队列里继续用。由于条件分支之后的代码会把半藏送回老家，而进入这条分支的半藏还是个……傻半藏，所以跳过。</li>
</ul>
<p>最后把队伍人数清零（注意人数是指射完箭的人数哦），把洗完了傻半藏重新推回服役列表当中去。退役仪式圆满结束。</p>
<p>这里可以看到，如果不是队伍的最后几名半藏，那么什么时候被送回主人那里是不确定的。这个模型和思想有点类似于node的异步的感觉，算是玩了几年WEB积累的一点直觉吧。</p>
<hr>
<p>最后就是退役接口的实现了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dismiss</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></div><div class="line">    self.dismissed = <span class="keyword">True</span></div><div class="line">    self.result = wait_for_worker_finish(self.worker)</div><div class="line">    <span class="comment"># The last group of hanzoes have not been retired.</span></div><div class="line">    self.retire()</div></pre></td></tr></table></figure>
<p>这里一定要注意更新<code>dismissed</code>必须放在最前面，因为<code>wait_for_worker_finish</code>一上来就会给任务队列推一个<code>None</code>代码没有新任务了，如果之后再通过任何途径调用了<code>retire</code>时又推了新任务，那么这个任务就不可能被执行到。事实上应该是完全推不进去才对……感觉代码又一次不健壮了……</p>
<hr>
<p>最后分享一个有可能是史上最简陋的mock：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeSession</span><span class="params">(Session)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, url, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">raise</span> RequestException(<span class="string">'This is a test exception.'</span>)</div></pre></td></tr></table></figure>
<p>我的每一层的网络接口都可以接受一个<code>requests.Session</code>对象来代替直接从<code>requests.get</code>或者类似接口发送请求。最初这么做只是因为这样效率高，没想到有奇效……只要把这个类的实例作为session传进去就可以模拟断网了……于是我的单元测试覆盖率终于达到了100%。</p>
<p><img src="/images/牛逼坏了叉会腰.jpg" alt="可把我牛逼坏了"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于&lt;a href=&quot;https://github.com/oziroe/Bitabase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitabase&lt;/a&gt;这个项目，我并没有计划把它做得很复杂。首先分为两个大模块：&lt;code&gt;Bitabase&lt;/code&gt;部分承担真正的爬取工作部分，&lt;code&gt;web&lt;/code&gt;（还没有想好名字）会渲染一个简单的本地网站用于把数据展示出来，以及提供操作接口以控制爬虫的工作。虽然项目迁移到了macOS/PyCharm的开发环境，但是依然保留着Visual Studio的结构，因为……懒。开玩笑啦，要不是VS的补全实在太慢，也许到现在这还是一个Windows底下开发的项目。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bitabase&lt;/code&gt;底下没有更加细分的模块。&lt;code&gt;interface.py&lt;/code&gt;是面向标准库和第三方库的一个封装，理论上其上方的代码就不用再直接引用任何其他库了，全部需求可以由它本身满足；&lt;code&gt;base.py&lt;/code&gt;是代码真正的基础，将&lt;code&gt;interface.py&lt;/code&gt;里提供的原始的、面向过程的接口改造成为需求量身定制的形状，所有应用层的代码（比如&lt;code&gt;web&lt;/code&gt;模块）都不应该越过&lt;code&gt;base&lt;/code&gt;而直接引用&lt;code&gt;interface&lt;/code&gt;。今天要讲的就是&lt;code&gt;base&lt;/code&gt;模块当中最开始的一部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://oziroe.github.io/tags/Python/"/>
    
      <category term="Bitabase" scheme="https://oziroe.github.io/tags/Bitabase/"/>
    
      <category term="设计模式" scheme="https://oziroe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单的可暂停单工作线程模型</title>
    <link href="https://oziroe.github.io/2017/06/05/%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%AF%E6%9A%82%E5%81%9C%E5%8D%95%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://oziroe.github.io/2017/06/05/简单的可暂停单工作线程模型/</id>
    <published>2017-06-05T11:50:05.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>写完标题发现又是一篇《简单xxx》的文章。写个啥都是简单版，我好菜啊。</p>
<p><img src="/images/我好菜啊.jpg" alt="我好菜啊"></p>
<p>这篇文章涉及到的线程模型主要的使用场景是爬虫线程。作为一个高大上的爬虫，有一个问题一定要处理好的：突然断网怎么办。这也许就是一个每天晚上宿舍熄灯的人说不出的痛。我倒不是很在乎速度，使用阻塞式的网络请求也没关系；也不太在意CPU利用率，所以哪怕是主线程等待我也不着急。但问题就是我希望我的爬虫是“可暂停”的：不仅仅可以冻结当前状态，而且还能<strong>把部分成果拿出来</strong>。因此，一个单工作线程的“线程池”模型横空出世。【虽然后来也不是线程池了</p>
<p>使用单线程工作的好处是省了很多锁，而且并没有损失拓展性：反正以后要是等不及了再在这个线程底下开线程池也没关系是不是。</p>
<a id="more"></a>
<p>之前在写的时候通过查询大量<a href="https://stackoverflow.com/questions/6893968/how-to-get-the-return-value-from-a-thread-in-python" target="_blank" rel="external">Stackoverflow的问题</a>以及<del>官方资料</del>（这玩意好像没有官方文档），成功地绕了一个弯：为单个的工作线程开了一个<code>multiprocessing.pool.ThreadPool</code>，据说这样的好处是可以方便的拿到返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_worker</span><span class="params">(something)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    pool = ThreadPool(processes=<span class="number">1</span>)</div><div class="line">    async_result = pool.apply_async(real_worker)</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'pool'</span>: pool,</div><div class="line">        <span class="string">'result'</span>: async_result,</div><div class="line">        <span class="comment"># ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><em>注意：写的时候有点欠考虑，这样引用代码也许不太便于理解。可以参考<a href="https://github.com/oziroe/Bitabase/commit/6e340bb5ad5a4b8a2d6b87210125ed1d8a2ddfb1" target="_blank" rel="external">这次修改的commit</a>，谢谢配合。</em></p>
<p>然后在工作结束的时候结束进程并拿返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_worker_finish</span><span class="params">(worker)</span>:</span></div><div class="line">    <span class="comment"># ... here is some code tells worker there's no more work.</span></div><div class="line">    result = worker[<span class="string">'result'</span>].get()</div><div class="line">    <span class="comment"># ... some code update worker's state</span></div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>但是这个返回值并不是worker真正的产品（虽然这是<code>ThreadPool</code>的正确用法），因为这个返回值只有等全部的工作都做完了才能拿到，中途暂停（等会再说我是怎么实现暂停的）的时候是拿不到的。所以又开了两个<code>multiprocessing.Queue</code>，分别用来往worker里传任务和从worker往外传产品：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_worker</span><span class="params">(worker_method)</span>:</span></div><div class="line">    tasks_queue = Queue()</div><div class="line">    products_queue = Queue()</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">real_worker</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># ...</span></div><div class="line">            task = tasks_queue.get()</div><div class="line">            <span class="comment"># ...</span></div><div class="line">            product = worker_method(task)</div><div class="line">            <span class="comment"># ...</span></div><div class="line">            products_queue.put(product)</div><div class="line">    </div><div class="line">    <span class="comment"># ...</span></div><div class="line">    worker = &#123;</div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="string">'in_queue'</span>: tasks_queue,</div><div class="line">        <span class="string">'out_queue'</span>: products_queue,</div><div class="line">        <span class="comment"># ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>希望你还能把这个函数和上面那个合在一起。这样一来，真正传进来的<code>worker_method</code>所要实现的逻辑就很简单了：接收一个参数作为任务，返回产品。它还可以任性地抛异常——<code>real_worker</code>里的主循环当中省略的大部分代码就是为了处理这个的。这样一来随时增派新任务和获取已经完成部分的产品就变得非常容易了：只要传<code>worker</code>作为参数，取得对应的队列调用库的接口即可。具体可以参考官方文档。</p>
<p>在<code>real_worker</code>的主循环中做的另一件事就是实现暂停功能，这是通过一对扭在一起的<code>multiprocessing.Event</code>实现的。具体如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_worker</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    working = Event()</div><div class="line">    working.set()</div><div class="line">    pausing = Event()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">real_worker</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            pausing.set()</div><div class="line">            working.wait()</div><div class="line">            pausing.clear()</div><div class="line">            </div><div class="line">            <span class="comment"># ...</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="string">'work_event'</span>: working,</div><div class="line">        <span class="string">'pause_event'</span>: pausing,</div><div class="line">        <span class="comment"># ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pause_worker</span><span class="params">(worker: dict)</span> -&gt; bool:</span></div><div class="line">	<span class="comment"># ...</span></div><div class="line">    worker[<span class="string">'work_event'</span>].clear()</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="comment"># Wait for worker finishing current task.</span></div><div class="line">    worker[<span class="string">'pause_event'</span>].wait()</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>之所以还需要一个<code>pause_event</code>主要是因为一个BUG：最后一个任务可能会在worker被暂停以后被推进产品队列当中去。有了这个事件，<code>pause_worker</code>会一直等到最后一个产品被做完以后才返回，就不会出现莫名丢产品的情况了。</p>
<p>这里省略的代码主要是用来确定当前worker状态的两个布尔值：<code>is_working</code>和<code>is_dead</code>。这两个值不仅可以用来作安全检查，还可以对外提供一个友善的接口。</p>
<hr>
<p>我跟你讲，以上是背景资料……整整写了1024个字……我也深表歉意。希望你能对接下来的正文依然充满了兴趣。</p>
<p>今天原本是要在上述的基础接口之上建立一层面向对象的封装，并写一篇类似于《半藏与守望先锋不得不说的故事》之类的文章【误。但是在我点了单元测试之后（单元测试爽过吸大麻），有一个API接口的测试挂了。我当即大吃一惊，难道这么几天哔哩哔哩还改了接口？仔细一看更吃惊了，只见这是用来读取多P视频各分P名字的接口，然而前两P的名字顺序反了！这是什么情况？于是我来到B站上一看：</p>
<p><del>截图</del></p>
<p>是的你没有看错，就是大名鼎鼎的保加利亚巫妖王……前两P的名字居然交换了次序！这怎么可能呢？由于我在几个星期前确确实实跑了几十遍单元测试通过了，所以才如此的确定。反正我是百思不得其解并兴奋地发了一条动态：</p>
<blockquote>
<p>由于我的爬虫单元测试fail了，我可能是世界上第一个发现av170001前两P名字对调了的人。</p>
</blockquote>
<p>好吧我要讲的不是这个。我要说的是，我手贱点了一下“Concurrency Diagram”的按钮以后，看到了一幅恐怖的景象：</p>
<p><img src="/images/并发测试图-1.png" alt="并发测试图#1"></p>
<p>怎么有线程没有停止？经过反复测试，我发现当我把单线程的线程池里的线程数改成4的时候，没有停止的线程数变成了四倍：</p>
<p><img src="/images/并发测试图-2.png" alt="并发测试图#2"></p>
<p><img src="/images/我的心好痛.png" alt="我的心好痛"></p>
<p>我明明在等待停止worker的函数里调用了<code>wait</code>，甚至还调用了<code>close</code>啊，为什么会这样呢？然后我又发现，所有没有停止的线程全都有一个同名且正常停止的线程。就像前两张图里画的那样。</p>
<p><img src="/images/WTF.png" alt="What the f*ck"></p>
<p>经过一圈Google无果之后（这个情况复杂到我不知道如何描述），我尝试着在单元测试里把各个节点的活跃线程数打印出来，然后发现，它每次运行的结果不一样……</p>
<p><img src="/images/我的心好痛.png" alt="我的心好痛*2"></p>
<p>这我又能怎么办呢？我只好决定把线程池改成一个单独的线程。还记得我为什么要用线程池吗？“可以方便地拿到返回值”。于是我尝试在worker里加一个字段用来存返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_worker</span><span class="params">(something)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    result = <span class="keyword">None</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">real_worker</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> result</div><div class="line">        <span class="comment"># ... decide to return</span></div><div class="line">        result = <span class="keyword">True</span>, <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="string">'result'</span>: result,</div><div class="line">        <span class="comment"># ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里<code>result</code>的结构是按照<code>ok, exception</code>的约定。然后我就发现，对<code>result</code>的修改好像不起作用……冥冥中的直觉让我把它改成了这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_worker</span><span class="params">(something)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    result = &#123;<span class="string">'value'</span>: <span class="keyword">None</span>&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">real_worker</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> result</div><div class="line">        <span class="comment"># ... decide to return</span></div><div class="line">        result[<span class="string">'value'</span>] = <span class="keyword">True</span>, <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="string">'result'</span>: result,</div><div class="line">        <span class="comment"># ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>是的你没有猜错，好了。也许你会说“稍有常识……”，没错我就是没有常识。</p>
<hr>
<p>下一个坑还要深一点点。在我把线程池改成线程以后，图表变成了这样：</p>
<p><img src="/images/并发测试图-3.png" alt="并发测试图#3"></p>
<p>看起来好多了，只不过两条队列并没有正常地终止，每一次都要等到下一个测试用例之后才结束，最后一个测试甚至延伸了好久。经过一番操作我把它们替换成了<code>multiproccessing.Pipe</code>，也就是一对<code>Connection</code>。如果你有经验应该已经猜到了，我在worker结束以后取结果的代码抛了<code>EOFError</code>。原因是当worker线程结束的时候它所对应的<code>Connection</code>被回收掉了。于是我只好把worker改成了这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">worker = &#123;</div><div class="line">    <span class="string">'worker'</span>: worker,</div><div class="line">    <span class="string">'result'</span>: result,</div><div class="line">    <span class="string">'connect'</span>: host_conn,</div><div class="line">    <span class="string">'work_event'</span>: working,</div><div class="line">    <span class="string">'pause_event'</span>: pausing,</div><div class="line">    <span class="string">'is_working'</span>: <span class="keyword">True</span>,</div><div class="line">    <span class="string">'is_dead'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="comment"># this prevents auto-close</span></div><div class="line">    <span class="string">'_worker_connection'</span>: worker_conn,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>顺便加上了前面提到过的所有东西。于是，我的努力最终达到了效果：</p>
<p><img src="/images/并发测试图-4.png" alt="并发测试图#4"></p>
<p>没有多余线程啦！</p>
<p><img src="/images/金正恩鼓掌.jpg" alt="鼓掌"></p>
<p>最后，感谢每一个看完这篇不知所云文章的人。<a href="https://github.com/oziroe/Bitabase/commit/6e340bb5ad5a4b8a2d6b87210125ed1d8a2ddfb1" target="_blank" rel="external">这里</a>是这次commit的地址，你可以看一看完整版的代码。下一篇文章应该可以写我是如何构建上层抽象的了……大概吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写完标题发现又是一篇《简单xxx》的文章。写个啥都是简单版，我好菜啊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/我好菜啊.jpg&quot; alt=&quot;我好菜啊&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇文章涉及到的线程模型主要的使用场景是爬虫线程。作为一个高大上的爬虫，有一个问题一定要处理好的：突然断网怎么办。这也许就是一个每天晚上宿舍熄灯的人说不出的痛。我倒不是很在乎速度，使用阻塞式的网络请求也没关系；也不太在意CPU利用率，所以哪怕是主线程等待我也不着急。但问题就是我希望我的爬虫是“可暂停”的：不仅仅可以冻结当前状态，而且还能&lt;strong&gt;把部分成果拿出来&lt;/strong&gt;。因此，一个单工作线程的“线程池”模型横空出世。【虽然后来也不是线程池了&lt;/p&gt;
&lt;p&gt;使用单线程工作的好处是省了很多锁，而且并没有损失拓展性：反正以后要是等不及了再在这个线程底下开线程池也没关系是不是。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://oziroe.github.io/tags/Python/"/>
    
      <category term="Bitabase" scheme="https://oziroe.github.io/tags/Bitabase/"/>
    
      <category term="线程" scheme="https://oziroe.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于C++11/STL的邻接表图实现</title>
    <link href="https://oziroe.github.io/2017/06/04/%E5%9F%BA%E4%BA%8EC-11-STL%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%9B%BE%E5%AE%9E%E7%8E%B0/"/>
    <id>https://oziroe.github.io/2017/06/04/基于C-11-STL的邻接表图实现/</id>
    <published>2017-06-04T13:47:14.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>我也不记得这是我第几次口口声声说着“我再也不用C++了”然后又用了C++。用了会浪费大量时间，使程序陷入无限复杂度；不用会浪费大量代码量，使程序陷入无限繁琐。一个小循环过后就会进入大循环的下一个步骤：开始转向Python等快速迭代的脚本语言，直到忍受不了其灵活而转回所谓“一步一个脚印”的主导思想当中来。唉，如果上天再给我一次机会，我坚决不学C以外的其他语言。最多加上Python。好吧还是得有Java或者C#。算了当我什么都没说。</p>
<p>这次实现的图是在昨天写完C版本的图之后，实在没忍住的成果。不知道为什么，在自己写的数据结构之上工作总有一种上不了台面的感觉，没有用STL来的舒坦。强烈克制住删代码的冲动以后，写了一套完全平行的图（项目代码膨胀的一个活生生的例子），并且放弃了“底层用STL上层暴露为C接口”的想法，毕竟用了C++而不用C++11，或者用了C++11而不用匿名函数，那么和咸鱼也没有什么区别了。</p>
<a id="more"></a>
<p>这回依然是一个邻接表的图，由于C++可以用模板，所以就不用再以索引的方式间接地访问顶点和边的数据了，这个图也就真的一个数据结构，而非仅仅是一堆锁链的集合了。首先定义一个辅助结构用来把边和有关信息绑定在一起：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Vertex, <span class="keyword">typename</span> Edge&gt; <span class="class"><span class="keyword">struct</span> <span class="title">EdgeBox</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Vertex source, destination;</div><div class="line">    Edge edge;</div><div class="line"></div><div class="line">    EdgeBox(<span class="keyword">const</span> Vertex &amp;s, <span class="keyword">const</span> Vertex &amp;d, <span class="keyword">const</span> Edge &amp;e) &#123;</div><div class="line">        source = s;</div><div class="line">        destination = d;</div><div class="line">        edge = e;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在边当中包含终点信息的好处自不必说，包含起点的好处是……和终点对称。对就是这样。</p>
<p>”所以说<code>Edge</code>就只是一个权重信息的过度抽象了？“确实有这种嫌疑，不过我的实际用例还真的用得到更多的信息：在一幅贝塞尔曲线作为边、曲线的交点作为顶点的图当中，一条边不但有起点终点，还有其对应的曲线的解析式。</p>
<p>写C版本的图时有一个夙愿，就是删除一个顶点的时候把已此顶点作为终点的边也一并删除，然而由于下层数据结构（就是那个没什么用的<code>posarr</code>）的限制而难以实现。这次为了达成愿望，加入一个平行的字典专为此功能：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;Vertex, <span class="built_in">vector</span>&lt;EdgeType&gt;&gt; _graph;</div><div class="line"><span class="built_in">map</span>&lt;Vertex, <span class="built_in">vector</span>&lt;EdgeType&gt;&gt; _vend;</div></pre></td></tr></table></figure>
<p>在<code>_graph</code>当中储存一般的邻接表结构，而<code>_vend[vert]</code>则储存以<code>vert</code>作为终点的边都有哪些。这时候边当中的起点字段就有用处了。</p>
<p>几个加减顶点和边的接口无需多言，遍历顶点的边的接口有了C++11的匿名函数和<code>for (auto some : thing)</code>语法糖以后也变得流畅很多，唯一一个瑕疵是删除边时的遍历：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteEdge</span><span class="params">(<span class="keyword">const</span> Vertex &amp;start, <span class="keyword">const</span> Edge &amp;edge)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> box = _graph[start].cbegin(); box != _graph[start].cend(); box++) &#123;</div><div class="line">        <span class="keyword">if</span> (box-&gt;edge == edge) &#123;</div><div class="line">            _graph[start].erase(box);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的for循环没有办法用新语法，因为循环体内部的<code>erase</code>要访问迭代器本身。我想大概有更友善的方法吧。</p>
<hr>
<p>由于深度优先搜索不需要队列的加持（虽然有了STL也不是很麻烦了），所以先实现的出来。<strong>注意：请务必读到下一条水平线再复制粘贴！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> PreviousMap = <span class="built_in">map</span>&lt;Vertex, <span class="keyword">const</span> Vertex *&gt;;</div><div class="line"><span class="keyword">using</span> SearchVisitor = function&lt;<span class="keyword">int</span> (<span class="keyword">const</span> Vertex &amp;v, <span class="keyword">const</span> Edge *through,</div><div class="line">                                    <span class="keyword">const</span> PreviousMap prev)&gt;;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> _dfs(<span class="keyword">const</span> Vertex &amp;current, <span class="keyword">const</span> SearchVisitor &amp;visitor, <span class="keyword">const</span> Edge *through,</div><div class="line">         PreviousMap &amp;prev) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">int</span> status = visitor(current, through, prev);</div><div class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> edge : _graph.at(current)) &#123;</div><div class="line">        <span class="keyword">if</span> (prev[edge.destination] != <span class="literal">nullptr</span>) &#123;</div><div class="line">            prev[edge.destination] = &amp;current;</div><div class="line">            <span class="keyword">int</span> s = _dfs(*prev[edge.destination], visitor, &amp;edge.edge, prev);</div><div class="line">            <span class="keyword">if</span> (s != <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfsVisit</span><span class="params">(<span class="keyword">const</span> Vertex &amp;start, <span class="keyword">const</span> SearchVisitor &amp;&amp;visitor)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">    PreviousMap prev;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> pair : _graph)</div><div class="line">        prev[pair.first] = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">return</span> _dfs(start, visitor, <span class="literal">nullptr</span>, prev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里<code>SerachVisitor</code>借口的设计非常反人类，需要在匿名函数声明处写一大长串的参数类型，不过除了特别简单的遍历方法应该也不会已匿名函数的方法写出，所以尚可接受。其中<code>through</code>为遍历中是走哪一条边到达当前顶点的，如果是对出发点调用则该参数为<code>nullptr</code>。正因此才把这个参数改为指针，从而破坏了全引用借口的统一性。这么说来其实指针在C++当中起到了其他语言<code>Nullable</code>或者<code>?</code> <code>!</code>类型的功能，这么用真的没有问题吧……</p>
<p><code>prev</code>储存每一个顶点在遍历顺序中的前一个顶点，回调函数还可以通过返回非0值得方式提前结束遍历，这对于寻找某种最优路的场景应该是比较友善的。考虑到C++11中的匿名函数可以捕获上层作用域中的变量，所以就没有必要传一个额外的payload了。</p>
<p>为什么对外接口中接受的函数类型是个右值引用，而到了对内的接口就变成了左值引用呢？别问我，我只知道不这样写都会报错……</p>
<p><img src="/images/我能怎么办，我也很绝望啊.jpeg" alt="我能怎么办，我也很绝望啊"></p>
<p>上面的代码里有一个bug，聪明的你发现了吗？我忘记把起始点对应的<code>prev</code>设置好了……原来写博客还有debug的功能，真是太厉害了。</p>
<hr>
<p>这大概是我与C++的合作中体验最好的一次了，没有踩到语法的坑、标准库的坑以及编译器的坑。唯一美中不足地就是IDE有点撑不住了。（另外显然，博客的高亮插件也阵亡了。）我亲爱的CLion的代码补全从瞬间出现之间降至秒级，有时会产生一种在用编辑器的错觉。另外分享两则疯掉的CLion：</p>
<p><img src="/images/CLion疯了-1.png" alt="CLion精神病病例#1"></p>
<p><img src="/images/CLion疯了-2.png" alt="CLion精神病病例#2"></p>
<p>后来呢？我想把图的实现代码命名为<code>adjgph.hpp</code>(<strong>adj</strong>ancency <strong>g</strong>ra<strong>ph</strong>)，把测试代码文件命名为<code>adjgph_test.cpp</code>，然而我写完以后发现CLion非常智能地帮助我保持了名字的统一性：我把它俩任意一个的<code>_test</code>去掉，另一个的后缀也会自动消失；反之亦然。</p>
<p><img src="/images/妈的智障.png" alt="妈的智障"></p>
<p>于是我只好动用了外部工具实现了我的目的，然后……bug就好了。是时候再放一次这张图了：</p>
<p><img src="/images/还有这种操作.png" alt="就是有这种操作"></p>
<p>这种莫名其妙的操作在JetBrains家的IDE上还出现过一次，以后有机会再写出来吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也不记得这是我第几次口口声声说着“我再也不用C++了”然后又用了C++。用了会浪费大量时间，使程序陷入无限复杂度；不用会浪费大量代码量，使程序陷入无限繁琐。一个小循环过后就会进入大循环的下一个步骤：开始转向Python等快速迭代的脚本语言，直到忍受不了其灵活而转回所谓“一步一个脚印”的主导思想当中来。唉，如果上天再给我一次机会，我坚决不学C以外的其他语言。最多加上Python。好吧还是得有Java或者C#。算了当我什么都没说。&lt;/p&gt;
&lt;p&gt;这次实现的图是在昨天写完C版本的图之后，实在没忍住的成果。不知道为什么，在自己写的数据结构之上工作总有一种上不了台面的感觉，没有用STL来的舒坦。强烈克制住删代码的冲动以后，写了一套完全平行的图（项目代码膨胀的一个活生生的例子），并且放弃了“底层用STL上层暴露为C接口”的想法，毕竟用了C++而不用C++11，或者用了C++11而不用匿名函数，那么和咸鱼也没有什么区别了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="4b" scheme="https://oziroe.github.io/tags/4b/"/>
    
      <category term="C" scheme="https://oziroe.github.io/tags/C/"/>
    
      <category term="C++" scheme="https://oziroe.github.io/tags/C/"/>
    
      <category term="STL" scheme="https://oziroe.github.io/tags/STL/"/>
    
      <category term="图" scheme="https://oziroe.github.io/tags/%E5%9B%BE/"/>
    
      <category term="C++11" scheme="https://oziroe.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>简单数组结构posarr及操作</title>
    <link href="https://oziroe.github.io/2017/06/02/%E7%AE%80%E5%8D%95%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>https://oziroe.github.io/2017/06/02/简单数组结构及操作/</id>
    <published>2017-06-02T15:04:00.000Z</published>
    <updated>2017-07-30T05:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实这是一种“假”的数据结构，没有什么新的结构，甚至平行数组都没有，它就是一个简单的……数组</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> *posarr_p;</div></pre></td></tr></table></figure>
<p>一切操作，都围绕着这个如假包换的数组展开。</p>
<p><img src="/images/还有这种操作.png" alt="就是有这种操作"></p>
<a id="more"></a>
<p>使用数组的第一个元素储存长度容易导致很多不良后果——比如遍历数组时，索引和元素的“位置”的偏差。因此我的解决方案是：没有使用的元素填-1，最后一个元素填-2，并且不使用它——不然就没法确定数组的结尾了。</p>
<p>那么如果数据是-1或者-2怎么办？好办，要求数据不能小于0就行了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">posarr_initia</span><span class="params">(posarr_p memo, <span class="keyword">const</span> <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">        memo[i] = <span class="number">-1</span>;</div><div class="line">    memo[size] = <span class="number">-2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>宏替换函数不推荐作为内联函数使用了，不过用来完成一些语言能力之外的事情还是可以的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> POSARR(name, size) int name[size + 1]; posarr_initia(name, size)</span></div></pre></td></tr></table></figure>
<p>删除一个元素时用后面的元素填充，而添加元素时只要简单的在末尾找到一个空位就行了。目前的删除动作把每一个元素都向前移了一位，如果不在乎顺序的话可以拿最后一个元素填补空位，可以进一步提高效率：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">posarr_delete</span><span class="params">(posarr_p <span class="built_in">array</span>, <span class="keyword">const</span> <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[pos] &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = pos; <span class="built_in">array</span>[i + <span class="number">1</span>] &gt;= <span class="number">0</span>; i++)</div><div class="line">        <span class="built_in">array</span>[i] = <span class="built_in">array</span>[i + <span class="number">1</span>];</div><div class="line">    <span class="built_in">array</span>[i] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">posarr_append</span><span class="params">(posarr_p <span class="built_in">array</span>, <span class="keyword">const</span> <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    assert(data &gt;= <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="built_in">array</span>[i] != <span class="number">-2</span>; i++)</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="built_in">array</span>[i] = data;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个喜闻乐见的toString工具函数。由于数据结构的限制，没有找到在一趟之内且不借助buffer的方法来先输出长度再输出各元素，所以只好遍历两趟。好在对于这种小数组，对于它的使用场景一般不会超过16个元素的长度，所以效率上不会有显著瓶颈。代码不贴了，效果大概是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">posarr#10[0, 1, 2, 3, 4, 5, 6, 7, ...]</div></pre></td></tr></table></figure>
<p>只显示前八个元素，这样就算放在一行log当中也不会太尴尬。</p>
<p>最后，一个用来遍历数组的工具宏替换函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> POSARR_ITERAT(array, item, index) \</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, item = <span class="built_in">array</span>[index]; item &gt;= <span class="number">0</span>; \</div><div class="line">         index++, item = <span class="built_in">array</span>[index])</div></pre></td></tr></table></figure>
<p>就是这些。下一步会添加刚刚想到的删除函数，并且把这个数据结构用来作邻接表组成的图数据结构的基石。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这是一种“假”的数据结构，没有什么新的结构，甚至平行数组都没有，它就是一个简单的……数组&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *posarr_p;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一切操作，都围绕着这个如假包换的数组展开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/还有这种操作.png&quot; alt=&quot;就是有这种操作&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="4b" scheme="https://oziroe.github.io/tags/4b/"/>
    
      <category term="C" scheme="https://oziroe.github.io/tags/C/"/>
    
      <category term="数据结构" scheme="https://oziroe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
